"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var githubSection=document.getElementById("github-section"),skillsSection=document.getElementById("skills-section"),worksSection=document.getElementById("works-section"),siteSpinner=document.getElementById("site-spinner"),siteSpinnerWrap=document.getElementsByClassName("site-spinner-wrap")[0];function polyfill(){var s=window,c=document;if(!("scrollBehavior"in c.documentElement.style&&!0!==s.__forceSmoothScrollPolyfill__)){var e,t=s.HTMLElement||s.Element,i=468,d={scroll:s.scroll||s.scrollTo,scrollBy:s.scrollBy,elementScroll:t.prototype.scroll||f,scrollIntoView:t.prototype.scrollIntoView},p=s.performance&&s.performance.now?s.performance.now.bind(s.performance):Date.now,o=(e=s.navigator.userAgent,new RegExp(["MSIE ","Trident/","Edge/"].join("|")).test(e)?1:0);s.scroll=s.scrollTo=function(){void 0!==arguments[0]&&(!0!==n(arguments[0])?r.call(s,c.body,void 0!==arguments[0].left?~~arguments[0].left:s.scrollX||s.pageXOffset,void 0!==arguments[0].top?~~arguments[0].top:s.scrollY||s.pageYOffset):d.scroll.call(s,void 0!==arguments[0].left?arguments[0].left:"object"!==_typeof(arguments[0])?arguments[0]:s.scrollX||s.pageXOffset,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:s.scrollY||s.pageYOffset))},s.scrollBy=function(){void 0!==arguments[0]&&(n(arguments[0])?d.scrollBy.call(s,void 0!==arguments[0].left?arguments[0].left:"object"!==_typeof(arguments[0])?arguments[0]:0,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:0):r.call(s,c.body,~~arguments[0].left+(s.scrollX||s.pageXOffset),~~arguments[0].top+(s.scrollY||s.pageYOffset)))},t.prototype.scroll=t.prototype.scrollTo=function(){if(void 0!==arguments[0])if(!0!==n(arguments[0])){var e=arguments[0].left,t=arguments[0].top;r.call(this,this,void 0===e?this.scrollLeft:~~e,void 0===t?this.scrollTop:~~t)}else{if("number"==typeof arguments[0]&&void 0===arguments[1])throw new SyntaxError("Value could not be converted");d.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left:"object"!==_typeof(arguments[0])?~~arguments[0]:this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top:void 0!==arguments[1]?~~arguments[1]:this.scrollTop)}},t.prototype.scrollBy=function(){void 0!==arguments[0]&&(!0!==n(arguments[0])?this.scroll({left:~~arguments[0].left+this.scrollLeft,top:~~arguments[0].top+this.scrollTop,behavior:arguments[0].behavior}):d.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left+this.scrollLeft:~~arguments[0]+this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top+this.scrollTop:~~arguments[1]+this.scrollTop))},t.prototype.scrollIntoView=function(){if(!0!==n(arguments[0])){var e=function(e){for(var t,o,n;!1==((e=e.parentNode)===c.body)&&!1===(o=l(t=e,"Y")&&a(t,"Y"),n=l(t,"X")&&a(t,"X"),o||n););return e}(this),t=e.getBoundingClientRect(),o=this.getBoundingClientRect();e!==c.body?(r.call(this,e,e.scrollLeft+o.left-t.left,e.scrollTop+o.top-t.top),"fixed"!==s.getComputedStyle(e).position&&s.scrollBy({left:t.left,top:t.top,behavior:"smooth"})):s.scrollBy({left:o.left,top:o.top,behavior:"smooth"})}else d.scrollIntoView.call(this,void 0===arguments[0]||arguments[0])}}function f(e,t){this.scrollLeft=e,this.scrollTop=t}function n(e){if(null===e||"object"!==_typeof(e)||void 0===e.behavior||"auto"===e.behavior||"instant"===e.behavior)return!0;if("object"===_typeof(e)&&"smooth"===e.behavior)return!1;throw new TypeError("behavior member of ScrollOptions "+e.behavior+" is not a valid value for enumeration ScrollBehavior.")}function l(e,t){return"Y"===t?e.clientHeight+o<e.scrollHeight:"X"===t?e.clientWidth+o<e.scrollWidth:void 0}function a(e,t){var o=s.getComputedStyle(e,null)["overflow"+t];return"auto"===o||"scroll"===o}function u(e){var t,o,n,l,a=(p()-e.startTime)/i;l=a=1<a?1:a,t=.5*(1-Math.cos(Math.PI*l)),o=e.startX+(e.x-e.startX)*t,n=e.startY+(e.y-e.startY)*t,e.method.call(e.scrollable,o,n),o===e.x&&n===e.y||s.requestAnimationFrame(u.bind(s,e))}function r(e,t,o){var n,l,a,i,r=p();i=e===c.body?(l=(n=s).scrollX||s.pageXOffset,a=s.scrollY||s.pageYOffset,d.scroll):(l=(n=e).scrollLeft,a=e.scrollTop,f),u({scrollable:n,method:i,startTime:r,startX:l,startY:a,x:t,y:o})}}window.addEventListener("load",function(e){siteSpinnerWrap.style.display="none"}),"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports={polyfill:polyfill}:polyfill();var worksBtnFooter=document.getElementById("works-btn-footer"),skillsBtnFooter=document.getElementById("skills-btn-footer"),githubBtnFooter=document.getElementById("github-btn-footer");worksBtnFooter.addEventListener("click",function(e){e.preventDefault(),window.scroll({top:worksSection.offsetTop,left:0,behavior:"smooth"})}),skillsBtnFooter.addEventListener("click",function(e){e.preventDefault(),window.scroll({top:skillsSection.offsetTop,left:0,behavior:"smooth"})}),githubBtnFooter.addEventListener("click",function(e){e.preventDefault(),window.scroll({top:githubSection.offsetTop,left:0,behavior:"smooth"})});var worksBtn=document.getElementById("works-btn"),skillsBtn=document.getElementById("skills-btn"),githubBtn=document.getElementById("github-btn"),burger=document.getElementsByClassName("burger")[0],inputBurger=document.getElementById("input-burger"),header=document.getElementsByClassName("header")[0];worksBtn.addEventListener("click",function(e){e.preventDefault(),burger.classList.toggle("open"),inputBurger.checked=!1,document.body.classList.remove("modal-open"),window.scroll({top:worksSection.offsetTop,left:0,behavior:"smooth"})}),skillsBtn.addEventListener("click",function(e){e.preventDefault(),burger.classList.toggle("open"),inputBurger.checked=!1,document.body.classList.remove("modal-open"),window.scroll({top:skillsSection.offsetTop,left:0,behavior:"smooth"})}),githubBtn.addEventListener("click",function(e){e.preventDefault(),burger.classList.toggle("open"),inputBurger.checked=!1,document.body.classList.remove("modal-open"),window.scroll({top:githubSection.offsetTop,left:0,behavior:"smooth"})}),header.addEventListener("click",function(e){e.target!==header&&e.target!==header.children[0]||(burger.classList.remove("open"),inputBurger.checked=!1,document.body.classList.remove("modal-open"))}),burger.addEventListener("click",function(e){burger.classList.toggle("open"),document.body.classList.toggle("modal-open")});var colors={Mercury:"#ff2b2b",TypeScript:"#2b7489",PureBasic:"#5a6986","Objective-C++":"#6866fb",Self:"#0579aa",edn:"#db5855",NewLisp:"#87AED7","Jupyter Notebook":"#DA5B0B",Rebol:"#358a5b",Frege:"#00cafe",Dart:"#00B4AB",AspectJ:"#a957b0",Shell:"#89e051","Web Ontology Language":"#9cc9dd",xBase:"#403a40",Eiffel:"#946d57",Nix:"#7e7eff",RAML:"#77d9fb",MTML:"#b7e1f4",Racket:"#22228f",Elixir:"#6e4a7e",SAS:"#B34936",Agda:"#315665",wisp:"#7582D1",D:"#ba595e",Kotlin:"#F18E33",Opal:"#f7ede0",Crystal:"#776791","Objective-C":"#438eff","ColdFusion CFC":"#ed2cd6",Oz:"#fab738",Mirah:"#c7a938","Objective-J":"#ff0c5a",Gosu:"#82937f",FreeMarker:"#0050b2",Ruby:"#701516","Component Pascal":"#b0ce4e",Arc:"#aa2afe",Brainfuck:"#2F2530",Nit:"#009917",APL:"#5A8164",Go:"#375eab","Visual Basic":"#945db7",PHP:"#4F5D95",Cirru:"#ccccff",SQF:"#3F3F3F",Glyph:"#e4cc98",Java:"#b07219",MAXScript:"#00a6a6",Scala:"#DC322F",Makefile:"#427819",ColdFusion:"#ed2cd6",Perl:"#0298c3",Lua:"#000080",Vue:"#2c3e50",Verilog:"#b2b7f8",Factor:"#636746",Haxe:"#df7900","Pure Data":"#91de79",Forth:"#341708",Red:"#ee0000",Hy:"#7790B2",Volt:"#1F1F1F",LSL:"#3d9970",eC:"#913960",CoffeeScript:"#244776",HTML:"#e44b23",Lex:"#DBCA00","API Blueprint":"#2ACCA8",Swift:"#ffac45",C:"#555555",AutoHotkey:"#6594b9",Isabelle:"#FEFE00",Metal:"#8f14e9",Clarion:"#db901e",JSONiq:"#40d47e",Boo:"#d4bec1",AutoIt:"#1C3552",Clojure:"#db5855",Rust:"#dea584",Prolog:"#74283c",SourcePawn:"#5c7611",AMPL:"#E6EFBB",FORTRAN:"#4d41b1",ANTLR:"#9DC3FF",Harbour:"#0e60e3",Tcl:"#e4cc98",BlitzMax:"#cd6400",PigLatin:"#fcd7de",Lasso:"#999999",ECL:"#8a1267",VHDL:"#adb2cb",Elm:"#60B5CC","Propeller Spin":"#7fa2a7",X10:"#4B6BEF",IDL:"#a3522f",ATS:"#1ac620",Ada:"#02f88c","Unity3D Asset":"#ab69a1",Nu:"#c9df40",LFE:"#004200",SuperCollider:"#46390b",Oxygene:"#cdd0e3",ASP:"#6a40fd",Assembly:"#6E4C13",Gnuplot:"#f0a9f0",JFlex:"#DBCA00",NetLinx:"#0aa0ff",Turing:"#45f715",Vala:"#fbe5cd",Processing:"#0096D8",Arduino:"#bd79d1",FLUX:"#88ccff",NetLogo:"#ff6375","C Sharp":"#178600",CSS:"#563d7c","Emacs Lisp":"#c065db",Stan:"#b2011d",SaltStack:"#646464",QML:"#44a51c",Pike:"#005390",LOLCODE:"#cc9900",ooc:"#b0b77e",Handlebars:"#01a9d6",J:"#9EEDFF",Mask:"#f97732",EmberScript:"#FFF4F3",TeX:"#3D6117",Nemerle:"#3d3c6e",KRL:"#28431f","Ren'Py":"#ff7f7f","Unified Parallel C":"#4e3617",Golo:"#88562A",Fancy:"#7b9db4",OCaml:"#3be133",Shen:"#120F14",Pascal:"#b0ce4e","F#":"#b845fc",Puppet:"#302B6D",ActionScript:"#882B0F",Diff:"#88dddd","Ragel in Ruby Host":"#9d5200",Fantom:"#dbded5",Zephir:"#118f9e",Click:"#E4E6F3",Smalltalk:"#596706",DM:"#447265",Ioke:"#078193",PogoScript:"#d80074",LiveScript:"#499886",JavaScript:"#f1e05a",VimL:"#199f4b",PureScript:"#1D222D",ABAP:"#E8274B",Matlab:"#bb92ac",Slash:"#007eff",R:"#198ce7",Erlang:"#B83998",Pan:"#cc0000",LookML:"#652B81",Eagle:"#814C05",Scheme:"#1e4aec",PLSQL:"#dad8d8",Python:"#3572A5",Max:"#c4a79c","Common Lisp":"#3fb68b",Latte:"#A8FF97",XQuery:"#5232e7",Omgrofl:"#cabbff",XC:"#99DA07",Nimrod:"#37775b",SystemVerilog:"#DAE1C2",Chapel:"#8dc63f",Groovy:"#e69f56",Dylan:"#6c616e",E:"#ccce35",Parrot:"#f3ca0a","Grammatical Framework":"#79aa7a","Game Maker Language":"#8fb200",Papyrus:"#6600cc","NetLinx+ERB":"#747faa",Clean:"#3F85AF",Alloy:"#64C800",Squirrel:"#800000",PAWN:"#dbb284",UnrealScript:"#a54c4d","Standard ML":"#dc566d",Slim:"#ff8f77",Perl6:"#0000fb",Julia:"#a270ba",Haskell:"#29b544",NCL:"#28431f",Io:"#a9188d",Rouge:"#cc0088","C++":"#f34b7d","AGS Script":"#B9D9FF",Dogescript:"#cca760",nesC:"#94B0C7"},url="https://api.github.com",options={headers:{Accept:"application/vnd.github.v3+json","Content-Type":"application/json"}},artem="izosimov",ilya="zekchan",user=ilya,reposAmount=4,spinner=document.getElementById("spinner"),amountPages=null,currentPageNum=1,createRepoItem=function(e){var t=document.createElement("div");return t.classList.add("github__repository-item"),t.innerHTML='\n         <a href="'.concat(e.url,'" target="_blank" class="github__repository-item-name">').concat(e.name,'</a>\n         <div class="github__item-description">\n             <div style="background-color: ').concat(e.color,'" class="github__language-color"></div>\n             <p class="github__language">').concat(e.lang,"</p>\n             ").concat(e.stars?'<p class="github__stars">'+e.stars+"</p>":"","\n             ").concat(e.forks?'<p class="github__forks">'+e.forks+"</p>":"",'\n             <p class="github__last-update">Updated on ').concat(getCustomDate(e.updated),"</p>\n         </div>"),t},getCustomDate=function(e){var t=new Date(e);return"".concat(t.getDate()," ").concat(["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][t.getMonth()]," ").concat(1900+t.getYear())},createEmptyPageElem=function(){var e=document.createElement("span");return e.classList.add("pagination-list__item"),e.innerHTML="&hellip;",e},createPageElem=function(e){var t=document.createElement("a");return t.classList.add("pagination-list__item"),t.innerHTML="".concat(e),t.addEventListener("click",function(e){document.querySelectorAll(".github__repository-item").forEach(function(e){return e.remove()})}),e==currentPageNum&&t.classList.add("pagination-list__item_active"),t.addEventListener("click",paginationClickHandler),t},getNewGithubPage=function(e){spinner.style.display="block",fetch("".concat(url,"/users/").concat(user,"/repos?page=").concat(e,"&per_page=").concat(reposAmount),options).then(function(e){return spinner.style.display="none",e.json()}).then(function(e){var o=document.querySelector(".pagination-list"),t=[];e.forEach(function(e){t.push({name:e.name,forks:e.forks,lang:e.language,updated:e.updated_at,stars:e.stargazers_count,color:colors[e.language],url:e.html_url})}),t.forEach(function(e,t){gitHubReposList.insertBefore(createRepoItem(e),o)})})};fetch("".concat(url,"/users/").concat(user),options).then(function(e){return e.json()}).then(function(e){amountPages=Math.ceil(e.public_repos/reposAmount),setPagination(currentPageNum,amountPages)});var paginationClickHandler=function(e){currentPageNum=e.target.innerHTML;document.getElementById("gitHubReposList");var t=document.querySelector(".pagination-list"),o=document.querySelectorAll(".pagination-list__item"),n={top:githubSection.offsetTop,left:0,behavior:"smooth"};window.scroll(n),o.forEach(function(e){return e.remove()}),t.remove(),setPagination(currentPageNum,amountPages)},setPagination=function(e,t){var o=document.getElementById("gitHubReposList"),n=document.createElement("div");if(n.classList.add("pagination-list"),1===t)n.appendChild(createPageElem(1));else if(t<4)for(var l=1;l<=t;l++)n.appendChild(createPageElem(l));else+e-1==0?(n.appendChild(createPageElem(+e)),n.appendChild(createPageElem(+e+1)),n.appendChild(createEmptyPageElem()),n.appendChild(createPageElem(+t))):+e-1==1?(n.appendChild(createPageElem(+e-1)),n.appendChild(createPageElem(+e)),n.appendChild(createPageElem(+e+1)),n.appendChild(createEmptyPageElem()),n.appendChild(createPageElem(+t))):+e-2==1?(n.appendChild(createPageElem(1)),n.appendChild(createPageElem(+e-1)),n.appendChild(createPageElem(+e)),n.appendChild(createPageElem(+e+1)),n.appendChild(createEmptyPageElem()),n.appendChild(createPageElem(+t))):+e+1==+t?(n.appendChild(createPageElem(1)),n.appendChild(createEmptyPageElem()),n.appendChild(createPageElem(+e-1)),n.appendChild(createPageElem(+e)),n.appendChild(createPageElem(+t))):+e+2==+t?(n.appendChild(createPageElem(1)),n.appendChild(createEmptyPageElem()),n.appendChild(createPageElem(+e-1)),n.appendChild(createPageElem(+e)),n.appendChild(createPageElem(+e+1)),n.appendChild(createPageElem(+t))):+e-1!=1&&+e+1!=+t&&+e+2!=+t&&+e!=+t?(n.appendChild(createPageElem(1)),n.appendChild(createEmptyPageElem()),n.appendChild(createPageElem(+e-1)),n.appendChild(createPageElem(+e)),n.appendChild(createPageElem(+e+1)),n.appendChild(createEmptyPageElem()),n.appendChild(createPageElem(+t))):+e==+t&&(n.appendChild(createPageElem(1)),n.appendChild(createEmptyPageElem()),n.appendChild(createPageElem(+e-1)),n.appendChild(createPageElem(+e)));o.appendChild(n),getNewGithubPage(e)},changingString=document.getElementById("changing-string"),arrow=document.getElementsByClassName("arrow")[0],phrases=["Junior frontend-разработчик","Junior Javascript-разработчик","HTML-верстальщик"];changingString.innerHTML="";var showPhrase=function d(n,l){var a=2<arguments.length&&void 0!==arguments[2]?arguments[2]:100,i=3<arguments.length&&void 0!==arguments[3]?arguments[3]:1e3;return new Promise(function(t){for(var e=function(e){setTimeout(function(){if(changingString.innerHTML+=n[l][e],e===n[l].length-1){changingString.innerHTML;t({phrases:n,index:l,speed:a,timeout:i})}},e*a)},o=0;o<n[l].length;o++)e(o)}).then(function(s){var c=s.timeout;return new Promise(function(r,e){setTimeout(function(){for(var t=s.phrases,o=s.speed,n=s.index,l=t[n],a=l.length,e=function(e){setTimeout(function(){l=l.slice(0,-1),changingString.innerHTML=l,e===a-1&&(n=n===t.length-1?0:n+1,globalProm.then(function(e){d(t,n,o,c)}),r())},e*o)},i=0;i<a;i++)e(i)},c)})})},globalProm=showPhrase(phrases,0,100,2e3),lol=function(){return new Promise(function(e,t){console.log("lol"),e()})};arrow.addEventListener("click",function(e){e.preventDefault();var t=document.getElementById("works-section");window.scroll({top:t.offsetTop,left:0,behavior:"smooth"})});var showMoreWorks=document.getElementsByClassName("recent-works__show-more")[0],recentWorksRows=document.getElementsByClassName("recent-works__row");showMoreWorks.dataset.isOpen=!1;for(var _i4=1;_i4<recentWorksRows.length;_i4++)recentWorksRows[_i4].style.display="none";showMoreWorks.addEventListener("click",function(e){if("false"===showMoreWorks.dataset.isOpen){for(var t=1;t<recentWorksRows.length;t++)recentWorksRows[t].style.display="flex";showMoreWorks.dataset.isOpen=!0,showMoreWorks.innerHTML="Скрыть"}else{for(var o=1;o<recentWorksRows.length;o++)recentWorksRows[o].style.display="none";window.scroll({top:worksSection.offsetTop,behavior:"smooth"}),showMoreWorks.dataset.isOpen=!1,showMoreWorks.innerHTML="Смотреть ещё"}});var showMoreSkills=document.getElementsByClassName("skills__show-more")[0],allSkills=document.getElementsByClassName("skills__skills-item"),skillsItemTitles=document.getElementsByClassName("skills__item-title"),onMoreSkillsClickHandler=function(e,t,o){if("false"===e.dataset.isOpen){for(var n=t.length-1;4<=n;n--)t[n].style.display="flex";e.dataset.isOpen=!0,e.innerHTML="Скрыть"}else{for(var l=t.length-1;4<=l;l--)t[l].style.display="none";e.dataset.isOpen=!1,e.innerHTML="Смотреть ещё",window.scroll({top:o.offsetTop,left:0,behavior:"smooth"})}},controlResize=function(){onMoreSkillsClickHandler(showMoreSkills,allSkills,skillsSection)},heightBeforeResize=window.screen.height,weightBeforeResize=document.body.clientWidth,checkWindowSize=function(){if(80<Math.abs(window.screen.height-heightBeforeResize)||10<Math.abs(document.body.clientWidth-weightBeforeResize))if(heightBeforeResize=window.screen.height,weightBeforeResize=document.body.clientWidth,document.body.clientWidth<=767){showMoreSkills.dataset.isOpen=!1,showMoreSkills.innerHTML="Смотреть ещё";for(var e=allSkills.length-1;4<=e;e--)allSkills[e].style.display="none"}else{for(var t=allSkills.length-1;4<=t;t--)allSkills[t].style.display="flex";showMoreSkills.dataset.isOpen=!0,showMoreSkills.innerHTML="Скрыть"}};if(document.body.clientWidth<=767){showMoreSkills.dataset.isOpen=!1,showMoreSkills.innerHTML="Смотреть ещё";for(var _i11=allSkills.length-1;4<=_i11;_i11--)allSkills[_i11].style.display="none"}else showMoreSkills.dataset.isOpen=!0;showMoreSkills.addEventListener("click",controlResize),window.addEventListener("resize",checkWindowSize);for(var i=0;i<skillsItemTitles.length;i++)skillsItemTitles[i].dataset.skillsNum="0".concat(i+1);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMvc2NyaXB0cy5qcyIsInNjcmlwdHMvc21vb3Roc2Nyb2xsLmpzIiwidGVtcGxhdGVzL2Zvb3Rlci9mb290ZXIuanMiLCJ0ZW1wbGF0ZXMvaGVhZGVyL2hlYWRlci5qcyIsInRlbXBsYXRlcy9tYWluLWNvbnRlbnQvZ2l0aHViLXNlY3Rpb24vY29sb3JzLmpzIiwidGVtcGxhdGVzL21haW4tY29udGVudC9naXRodWItc2VjdGlvbi9naXRodWIuanMiLCJ0ZW1wbGF0ZXMvbWFpbi1jb250ZW50L2dyZWV0aW5nLXNlY3Rpb24vZ3JlZXRpbmctc2VjdGlvbi5qcyIsInRlbXBsYXRlcy9tYWluLWNvbnRlbnQvcmVjZW50LXdvcmtzL3JlY2VudC13b3Jrcy5qcyIsInRlbXBsYXRlcy9tYWluLWNvbnRlbnQvc2tpbGxzL3NraWxscy5qcyJdLCJuYW1lcyI6WyJnaXRodWJTZWN0aW9uIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInNraWxsc1NlY3Rpb24iLCJ3b3Jrc1NlY3Rpb24iLCJzaXRlU3Bpbm5lciIsInNpdGVTcGlubmVyV3JhcCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJwb2x5ZmlsbCIsInciLCJ3aW5kb3ciLCJkIiwiZG9jdW1lbnRFbGVtZW50Iiwic3R5bGUiLCJfX2ZvcmNlU21vb3RoU2Nyb2xsUG9seWZpbGxfXyIsInVzZXJBZ2VudCIsIkVsZW1lbnQiLCJIVE1MRWxlbWVudCIsIlNDUk9MTF9USU1FIiwib3JpZ2luYWwiLCJzY3JvbGwiLCJzY3JvbGxUbyIsInNjcm9sbEJ5IiwiZWxlbWVudFNjcm9sbCIsInByb3RvdHlwZSIsInNjcm9sbEVsZW1lbnQiLCJzY3JvbGxJbnRvVmlldyIsIm5vdyIsInBlcmZvcm1hbmNlIiwiYmluZCIsIkRhdGUiLCJST1VORElOR19UT0xFUkFOQ0UiLCJuYXZpZ2F0b3IiLCJSZWdFeHAiLCJqb2luIiwidGVzdCIsInVuZGVmaW5lZCIsImFyZ3VtZW50cyIsInNob3VsZEJhaWxPdXQiLCJzbW9vdGhTY3JvbGwiLCJjYWxsIiwiYm9keSIsImxlZnQiLCJzY3JvbGxYIiwicGFnZVhPZmZzZXQiLCJ0b3AiLCJzY3JvbGxZIiwicGFnZVlPZmZzZXQiLCJfdHlwZW9mIiwidGhpcyIsInNjcm9sbExlZnQiLCJzY3JvbGxUb3AiLCJTeW50YXhFcnJvciIsImJlaGF2aW9yIiwic2Nyb2xsYWJsZVBhcmVudCIsImVsIiwiaXNTY3JvbGxhYmxlWSIsImlzU2Nyb2xsYWJsZVgiLCJwYXJlbnROb2RlIiwiaGFzU2Nyb2xsYWJsZVNwYWNlIiwiY2FuT3ZlcmZsb3ciLCJmaW5kU2Nyb2xsYWJsZVBhcmVudCIsInBhcmVudFJlY3RzIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xpZW50UmVjdHMiLCJnZXRDb21wdXRlZFN0eWxlIiwicG9zaXRpb24iLCJ4IiwieSIsImZpcnN0QXJnIiwiVHlwZUVycm9yIiwiYXhpcyIsImNsaWVudEhlaWdodCIsInNjcm9sbEhlaWdodCIsImNsaWVudFdpZHRoIiwic2Nyb2xsV2lkdGgiLCJvdmVyZmxvd1ZhbHVlIiwic3RlcCIsImNvbnRleHQiLCJ2YWx1ZSIsImN1cnJlbnRYIiwiY3VycmVudFkiLCJrIiwiZWxhcHNlZCIsInN0YXJ0VGltZSIsIk1hdGgiLCJjb3MiLCJQSSIsInN0YXJ0WCIsInN0YXJ0WSIsIm1ldGhvZCIsInNjcm9sbGFibGUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsImRpc3BsYXkiLCJleHBvcnRzIiwibW9kdWxlIiwid29ya3NCdG5Gb290ZXIiLCJza2lsbHNCdG5Gb290ZXIiLCJnaXRodWJCdG5Gb290ZXIiLCJwcmV2ZW50RGVmYXVsdCIsIm9mZnNldFRvcCIsIndvcmtzQnRuIiwic2tpbGxzQnRuIiwiZ2l0aHViQnRuIiwiYnVyZ2VyIiwiaW5wdXRCdXJnZXIiLCJoZWFkZXIiLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJjaGVja2VkIiwicmVtb3ZlIiwidGFyZ2V0IiwiY2hpbGRyZW4iLCJjb2xvcnMiLCJNZXJjdXJ5IiwiVHlwZVNjcmlwdCIsIlB1cmVCYXNpYyIsIk9iamVjdGl2ZS1DKysiLCJTZWxmIiwiZWRuIiwiTmV3TGlzcCIsIkp1cHl0ZXIgTm90ZWJvb2siLCJSZWJvbCIsIkZyZWdlIiwiRGFydCIsIkFzcGVjdEoiLCJTaGVsbCIsIldlYiBPbnRvbG9neSBMYW5ndWFnZSIsInhCYXNlIiwiRWlmZmVsIiwiTml4IiwiUkFNTCIsIk1UTUwiLCJSYWNrZXQiLCJFbGl4aXIiLCJTQVMiLCJBZ2RhIiwid2lzcCIsIkQiLCJLb3RsaW4iLCJPcGFsIiwiQ3J5c3RhbCIsIk9iamVjdGl2ZS1DIiwiQ29sZEZ1c2lvbiBDRkMiLCJPeiIsIk1pcmFoIiwiT2JqZWN0aXZlLUoiLCJHb3N1IiwiRnJlZU1hcmtlciIsIlJ1YnkiLCJDb21wb25lbnQgUGFzY2FsIiwiQXJjIiwiQnJhaW5mdWNrIiwiTml0IiwiQVBMIiwiR28iLCJWaXN1YWwgQmFzaWMiLCJQSFAiLCJDaXJydSIsIlNRRiIsIkdseXBoIiwiSmF2YSIsIk1BWFNjcmlwdCIsIlNjYWxhIiwiTWFrZWZpbGUiLCJDb2xkRnVzaW9uIiwiUGVybCIsIkx1YSIsIlZ1ZSIsIlZlcmlsb2ciLCJGYWN0b3IiLCJIYXhlIiwiUHVyZSBEYXRhIiwiRm9ydGgiLCJSZWQiLCJIeSIsIlZvbHQiLCJMU0wiLCJlQyIsIkNvZmZlZVNjcmlwdCIsIkhUTUwiLCJMZXgiLCJBUEkgQmx1ZXByaW50IiwiU3dpZnQiLCJDIiwiQXV0b0hvdGtleSIsIklzYWJlbGxlIiwiTWV0YWwiLCJDbGFyaW9uIiwiSlNPTmlxIiwiQm9vIiwiQXV0b0l0IiwiQ2xvanVyZSIsIlJ1c3QiLCJQcm9sb2ciLCJTb3VyY2VQYXduIiwiQU1QTCIsIkZPUlRSQU4iLCJBTlRMUiIsIkhhcmJvdXIiLCJUY2wiLCJCbGl0ek1heCIsIlBpZ0xhdGluIiwiTGFzc28iLCJFQ0wiLCJWSERMIiwiRWxtIiwiUHJvcGVsbGVyIFNwaW4iLCJYMTAiLCJJREwiLCJBVFMiLCJBZGEiLCJVbml0eTNEIEFzc2V0IiwiTnUiLCJMRkUiLCJTdXBlckNvbGxpZGVyIiwiT3h5Z2VuZSIsIkFTUCIsIkFzc2VtYmx5IiwiR251cGxvdCIsIkpGbGV4IiwiTmV0TGlueCIsIlR1cmluZyIsIlZhbGEiLCJQcm9jZXNzaW5nIiwiQXJkdWlubyIsIkZMVVgiLCJOZXRMb2dvIiwiQyBTaGFycCIsIkNTUyIsIkVtYWNzIExpc3AiLCJTdGFuIiwiU2FsdFN0YWNrIiwiUU1MIiwiUGlrZSIsIkxPTENPREUiLCJvb2MiLCJIYW5kbGViYXJzIiwiSiIsIk1hc2siLCJFbWJlclNjcmlwdCIsIlRlWCIsIk5lbWVybGUiLCJLUkwiLCJSZW4nUHkiLCJVbmlmaWVkIFBhcmFsbGVsIEMiLCJHb2xvIiwiRmFuY3kiLCJPQ2FtbCIsIlNoZW4iLCJQYXNjYWwiLCJGIyIsIlB1cHBldCIsIkFjdGlvblNjcmlwdCIsIkRpZmYiLCJSYWdlbCBpbiBSdWJ5IEhvc3QiLCJGYW50b20iLCJaZXBoaXIiLCJDbGljayIsIlNtYWxsdGFsayIsIkRNIiwiSW9rZSIsIlBvZ29TY3JpcHQiLCJMaXZlU2NyaXB0IiwiSmF2YVNjcmlwdCIsIlZpbUwiLCJQdXJlU2NyaXB0IiwiQUJBUCIsIk1hdGxhYiIsIlNsYXNoIiwiUiIsIkVybGFuZyIsIlBhbiIsIkxvb2tNTCIsIkVhZ2xlIiwiU2NoZW1lIiwiUExTUUwiLCJQeXRob24iLCJNYXgiLCJDb21tb24gTGlzcCIsIkxhdHRlIiwiWFF1ZXJ5IiwiT21ncm9mbCIsIlhDIiwiTmltcm9kIiwiU3lzdGVtVmVyaWxvZyIsIkNoYXBlbCIsIkdyb292eSIsIkR5bGFuIiwiRSIsIlBhcnJvdCIsIkdyYW1tYXRpY2FsIEZyYW1ld29yayIsIkdhbWUgTWFrZXIgTGFuZ3VhZ2UiLCJQYXB5cnVzIiwiTmV0TGlueCtFUkIiLCJDbGVhbiIsIkFsbG95IiwiU3F1aXJyZWwiLCJQQVdOIiwiVW5yZWFsU2NyaXB0IiwiU3RhbmRhcmQgTUwiLCJTbGltIiwiUGVybDYiLCJKdWxpYSIsIkhhc2tlbGwiLCJOQ0wiLCJJbyIsIlJvdWdlIiwiQysrIiwiQUdTIFNjcmlwdCIsIkRvZ2VzY3JpcHQiLCJuZXNDIiwidXJsIiwib3B0aW9ucyIsImhlYWRlcnMiLCJBY2NlcHQiLCJDb250ZW50LVR5cGUiLCJhcnRlbSIsImlseWEiLCJ1c2VyIiwicmVwb3NBbW91bnQiLCJzcGlubmVyIiwiYW1vdW50UGFnZXMiLCJjdXJyZW50UGFnZU51bSIsImNyZWF0ZVJlcG9JdGVtIiwiZGF0YSIsInJlcG9JdGVtIiwiY3JlYXRlRWxlbWVudCIsImFkZCIsImlubmVySFRNTCIsImNvbmNhdCIsIm5hbWUiLCJjb2xvciIsImxhbmciLCJzdGFycyIsImZvcmtzIiwiZ2V0Q3VzdG9tRGF0ZSIsInVwZGF0ZWQiLCJkYXRlIiwibmV3RGF0ZSIsImdldERhdGUiLCJnZXRNb250aCIsImdldFllYXIiLCJjcmVhdGVFbXB0eVBhZ2VFbGVtIiwiZW1wdHlQYWdlRWxlbSIsImNyZWF0ZVBhZ2VFbGVtIiwibnVtIiwicGFnZUVsZW0iLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImVsZW0iLCJwYWdpbmF0aW9uQ2xpY2tIYW5kbGVyIiwiZ2V0TmV3R2l0aHViUGFnZSIsInBhZ2VOdW0iLCJmZXRjaCIsInRoZW4iLCJyZXNwb25zZSIsImpzb24iLCJyZXMiLCJwYWdpbmF0aW9uIiwicXVlcnlTZWxlY3RvciIsImFyciIsInB1c2giLCJsYW5ndWFnZSIsInVwZGF0ZWRfYXQiLCJzdGFyZ2F6ZXJzX2NvdW50IiwiaHRtbF91cmwiLCJpIiwiZ2l0SHViUmVwb3NMaXN0IiwiaW5zZXJ0QmVmb3JlIiwiY2VpbCIsInB1YmxpY19yZXBvcyIsInNldFBhZ2luYXRpb24iLCJldmVudCIsInBhZ2luYXRpb25CbG9jayIsImFsbFByZXZpb3VzUGFnZXMiLCJhcHBlbmRDaGlsZCIsImNoYW5naW5nU3RyaW5nIiwiYXJyb3ciLCJwaHJhc2VzIiwic2hvd1BocmFzZSIsImluZGV4Iiwic3BlZWQiLCJsZW5ndGgiLCJ0aW1lb3V0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJfbG9vcCIsInNldFRpbWVvdXQiLCJyZWplY3QiLCJjdXJyZW50UGhyYXNlIiwicmVzTGVuZ3RoIiwiX2xvb3AyIiwic2xpY2UiLCJnbG9iYWxQcm9tIiwibG9sIiwiY29uc29sZSIsImxvZyIsInNob3dNb3JlV29ya3MiLCJyZWNlbnRXb3Jrc1Jvd3MiLCJkYXRhc2V0IiwiaXNPcGVuIiwic2hvd01vcmVTa2lsbHMiLCJhbGxTa2lsbHMiLCJza2lsbHNJdGVtVGl0bGVzIiwib25Nb3JlU2tpbGxzQ2xpY2tIYW5kbGVyIiwiYnRuIiwic2tpbGxzIiwic2VjdGlvbiIsImNvbnRyb2xSZXNpemUiLCJoZWlnaHRCZWZvcmVSZXNpemUiLCJzY3JlZW4iLCJoZWlnaHQiLCJ3ZWlnaHRCZWZvcmVSZXNpemUiLCJjaGVja1dpbmRvd1NpemUiLCJhYnMiLCJza2lsbHNOdW0iXSwibWFwcGluZ3MiOiI4UEFBQSxJQUFBQSxjQUFBQyxTQUFBQyxlQUFBLGtCQUNBQyxjQUFBRixTQUFBQyxlQUFBLGtCQUNBRSxhQUFBSCxTQUFBQyxlQUFBLGlCQUNBRyxZQUFBSixTQUFBQyxlQUFBLGdCQUNBSSxnQkFBQUwsU0FBQU0sdUJBQUEscUJBQUEsR0NEQSxTQUFBQyxXQUVBLElBQUFDLEVBQUFDLE9BQ0FDLEVBQUFWLFNBR0EsS0FDQSxtQkFBQVUsRUFBQUMsZ0JBQUFDLFFBQ0EsSUFBQUosRUFBQUssK0JBRkEsQ0FRQSxJQXVCQUMsRUF2QkFDLEVBQUFQLEVBQUFRLGFBQUFSLEVBQUFPLFFBQ0FFLEVBQUEsSUFHQUMsRUFBQSxDQUNBQyxPQUFBWCxFQUFBVyxRQUFBWCxFQUFBWSxTQUNBQyxTQUFBYixFQUFBYSxTQUNBQyxjQUFBUCxFQUFBUSxVQUFBSixRQUFBSyxFQUNBQyxlQUFBVixFQUFBUSxVQUFBRSxnQkFJQUMsRUFDQWxCLEVBQUFtQixhQUFBbkIsRUFBQW1CLFlBQUFELElBQ0FsQixFQUFBbUIsWUFBQUQsSUFBQUUsS0FBQXBCLEVBQUFtQixhQUNBRSxLQUFBSCxJQW1CQUksR0FYQWhCLEVBV0FOLEVBQUF1QixVQUFBakIsVUFSQSxJ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LEVBQUEsVUFDQUMsT0FBQSxVQUNBQyxLQUFBLFVBQ0FDLFFBQUEsVUFDQUMsY0FBQSxVQUNBQyxpQkFBQSxVQUNBQyxHQUFBLFVBQ0FDLE1BQUEsVUFDQUMsY0FBQSxVQUNBQyxLQUFBLFVBQ0FDLFdBQUEsVUFDQUMsS0FBQSxVQUNBQyxtQkFBQSxVQUNBQyxJQUFBLFVBQ0FDLFVBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLEdBQUEsVUFDQUMsZUFBQSxVQUNBQyxJQUFBLFVBQ0FDLE1BQUEsVUFDQUMsSUFBQSxVQUNBQyxNQUFBLFVBQ0FDLEtBQUEsVUFDQUMsVUFBQSxVQUNBQyxNQUFBLFVBQ0FDLFNBQUEsVUFDQUMsV0FBQSxVQUNBQyxLQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxRQUFBLFVBQ0FDLE9BQUEsVUFDQUMsS0FBQSxVQUNBQyxZQUFBLFVBQ0FDLE1BQUEsVUFDQUMsSUFBQSxVQUNBQyxHQUFBLFVBQ0FDLEtBQUEsVUFDQUMsSUFBQSxVQUNBQyxHQUFBLFVBQ0FDLGFBQUEsVUFDQUMsS0FBQSxVQUNBQyxJQUFBLFVBQ0FDLGdCQUFBLFVBQ0FDLE1BQUEsVUFDQUMsRUFBQSxVQUNBQyxXQUFBLFVBQ0FDLFNBQUEsVUFDQUMsTUFBQSxVQUNBQyxRQUFBLFVBQ0FDLE9BQUEsVUFDQUMsSUFBQSxVQUNBQyxPQUFBLFVBQ0FDLFFBQUEsVUFDQUMsS0FBQSxVQUNBQyxPQUFBLFVBQ0FDLFdBQUEsVUFDQUMsS0FBQSxVQUNBQyxRQUFBLFVBQ0FDLE1BQUEsVUFDQUMsUUFBQSxVQUNBQyxJQUFBLFVBQ0FDLFNBQUEsVUFDQUMsU0FBQSxVQUNBQyxNQUFBLFVBQ0FDLElBQUEsVUFDQUMsS0FBQSxVQUNBQyxJQUFBLFVBQ0FDLGlCQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsZ0JBQUEsVUFDQUMsR0FBQSxVQUNBQyxJQUFBLFVBQ0FDLGNBQUEsVUFDQUMsUUFBQSxVQUNBQyxJQUFBLFVBQ0FDLFNBQUEsVUFDQUMsUUFBQSxVQUNBQyxNQUFBLFVBQ0FDLFFBQUEsVUFDQUMsT0FBQSxVQUNBQyxLQUFBLFVBQ0FDLFdBQUEsVUFDQUMsUUFBQSxVQUNBQyxLQUFBLFVBQ0FDLFFBQUEsVUFDQUMsVUFBQSxVQUNBQyxJQUFBLFVBQ0FDLGFBQUEsVUFDQUMsS0FBQSxVQUNBQyxVQUFBLFVBQ0FDLElBQUEsVUFDQUMsS0FBQSxVQUNBQyxRQUFBLFVBQ0FDLElBQUEsVUFDQUMsV0FBQSxVQUNBQyxFQUFBLFVBQ0FDLEtBQUEsVUFDQUMsWUFBQSxVQUNBQyxJQUFBLFVBQ0FDLFFBQUEsVUFDQUMsSUFBQSxVQUNBQyxTQUFBLFVBQ0FDLHFCQUFBLFVBQ0FDLEtBQUEsVUFDQUMsTUFBQSxVQUNBQyxNQUFBLFVBQ0FDLEtBQUEsVUFDQUMsT0FBQSxVQUNBQyxLQUFBLFVBQ0FDLE9BQUEsVUFDQUMsYUFBQSxVQUNBQyxLQUFBLFVBQ0FDLHFCQUFBLFVBQ0FDLE9BQUEsVUFDQUMsT0FBQSxVQUNBQyxNQUFBLFVBQ0FDLFVBQUEsVUFDQUMsR0FBQSxVQUNBQyxLQUFBLFVBQ0FDLFdBQUEsVUFDQUMsV0FBQSxVQUNBQyxXQUFBLFVBQ0FDLEtBQUEsVUFDQUMsV0FBQSxVQUNBQyxLQUFBLFVBQ0FDLE9BQUEsVUFDQUMsTUFBQSxVQUNBQyxFQUFBLFVBQ0FDLE9BQUEsVUFDQUMsSUFBQSxVQUNBQyxPQUFBLFVBQ0FDLE1BQUEsVUFDQUMsT0FBQSxVQUNBQyxNQUFBLFVBQ0FDLE9BQUEsVUFDQUMsSUFBQSxVQUNBQyxjQUFBLFVBQ0FDLE1BQUEsVUFDQUMsT0FBQSxVQUNBQyxRQUFBLFVBQ0FDLEdBQUEsVUFDQUMsT0FBQSxVQUNBQyxjQUFBLFVBQ0FDLE9BQUEsVUFDQUMsT0FBQSxVQUNBQyxNQUFBLFVBQ0FDLEVBQUEsVUFDQUMsT0FBQSxVQUNBQyx3QkFBQSxVQUNBQyxzQkFBQSxVQUNBQyxRQUFBLFVBQ0FDLGNBQUEsVUFDQUMsTUFBQSxVQUNBQyxNQUFBLFVBQ0FDLFNBQUEsVUFDQUMsS0FBQSxVQUNBQyxhQUFBLFVBQ0FDLGNBQUEsVUFD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QUEsR0FBQWhCLEVBQUFBLElBQ0FvQyxVQUFBcEMsR0FBQXBXLE1BQUFrRixRQUFBLE9BRUFxVCxlQUFBRixRQUFBQyxRQUFBLEVBQ0FDLGVBQUF6RSxVQUFBLFdBS0EsR0FBQTFVLFNBQUF3QyxLQUFBaUMsYUFBQSxJQUFBLENBQ0EwVSxlQUFBRixRQUFBQyxRQUFBLEVBQ0FDLGVBQUF6RSxVQUFBLGVBRUEsSUFBQSxJQUFBc0MsS0FBQW9DLFVBQUFwQixPQUFBLEVBQUEsR0FBQWhCLEtBQUFBLE9BQ0FvQyxVQUFBcEMsTUFBQXBXLE1BQUFrRixRQUFBLFlBSUFxVCxlQUFBRixRQUFBQyxRQUFBLEVBR0FDLGVBQUF2VCxpQkFBQSxRQUFBOFQsZUFHQWpaLE9BQUFtRixpQkFBQSxTQUFBbVUsaUJBR0EsSUFBQSxJQUFBL0MsRUFBQSxFQUFBQSxFQUFBcUMsaUJBQUFyQixPQUFBaEIsSUFDQXFDLGlCQUFBckMsR0FBQWlDLFFBQUFnQixVQUFBLElBQUF0RixPQUFBcUMsRUFBQSIsImZpbGUiOiJzY3JpcHRzLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGdpdGh1YlNlY3Rpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2l0aHViLXNlY3Rpb24nKTtcbmNvbnN0IHNraWxsc1NlY3Rpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2tpbGxzLXNlY3Rpb24nKTtcbmNvbnN0IHdvcmtzU2VjdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3b3Jrcy1zZWN0aW9uJyk7XG5jb25zdCBzaXRlU3Bpbm5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzaXRlLXNwaW5uZXInKTtcbmNvbnN0IHNpdGVTcGlubmVyV3JhcCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3NpdGUtc3Bpbm5lci13cmFwJylbMF07XG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKGUpID0+IHtcbiAgICBzaXRlU3Bpbm5lcldyYXAuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBwb2x5ZmlsbFxuZnVuY3Rpb24gcG9seWZpbGwoKSB7XG4gIC8vIGFsaWFzZXNcbiAgdmFyIHcgPSB3aW5kb3c7XG4gIHZhciBkID0gZG9jdW1lbnQ7XG5cbiAgLy8gcmV0dXJuIGlmIHNjcm9sbCBiZWhhdmlvciBpcyBzdXBwb3J0ZWQgYW5kIHBvbHlmaWxsIGlzIG5vdCBmb3JjZWRcbiAgaWYgKFxuICAgICdzY3JvbGxCZWhhdmlvcicgaW4gZC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiZcbiAgICB3Ll9fZm9yY2VTbW9vdGhTY3JvbGxQb2x5ZmlsbF9fICE9PSB0cnVlXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGdsb2JhbHNcbiAgdmFyIEVsZW1lbnQgPSB3LkhUTUxFbGVtZW50IHx8IHcuRWxlbWVudDtcbiAgdmFyIFNDUk9MTF9USU1FID0gNDY4O1xuXG4gIC8vIG9iamVjdCBnYXRoZXJpbmcgb3JpZ2luYWwgc2Nyb2xsIG1ldGhvZHNcbiAgdmFyIG9yaWdpbmFsID0ge1xuICAgIHNjcm9sbDogdy5zY3JvbGwgfHwgdy5zY3JvbGxUbyxcbiAgICBzY3JvbGxCeTogdy5zY3JvbGxCeSxcbiAgICBlbGVtZW50U2Nyb2xsOiBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGwgfHwgc2Nyb2xsRWxlbWVudCxcbiAgICBzY3JvbGxJbnRvVmlldzogRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsSW50b1ZpZXdcbiAgfTtcblxuICAvLyBkZWZpbmUgdGltaW5nIG1ldGhvZFxuICB2YXIgbm93ID1cbiAgICB3LnBlcmZvcm1hbmNlICYmIHcucGVyZm9ybWFuY2Uubm93XG4gICAgICA/IHcucGVyZm9ybWFuY2Uubm93LmJpbmQody5wZXJmb3JtYW5jZSlcbiAgICAgIDogRGF0ZS5ub3c7XG5cbiAgLyoqXG4gICAqIGluZGljYXRlcyBpZiBhIHRoZSBjdXJyZW50IGJyb3dzZXIgaXMgbWFkZSBieSBNaWNyb3NvZnRcbiAgICogQG1ldGhvZCBpc01pY3Jvc29mdEJyb3dzZXJcbiAgICogQHBhcmFtIHtTdHJpbmd9IHVzZXJBZ2VudFxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICovXG4gIGZ1bmN0aW9uIGlzTWljcm9zb2Z0QnJvd3Nlcih1c2VyQWdlbnQpIHtcbiAgICB2YXIgdXNlckFnZW50UGF0dGVybnMgPSBbJ01TSUUgJywgJ1RyaWRlbnQvJywgJ0VkZ2UvJ107XG5cbiAgICByZXR1cm4gbmV3IFJlZ0V4cCh1c2VyQWdlbnRQYXR0ZXJucy5qb2luKCd8JykpLnRlc3QodXNlckFnZW50KTtcbiAgfVxuXG4gIC8qXG4gICAqIElFIGhhcyByb3VuZGluZyBidWcgcm91bmRpbmcgZG93biBjbGllbnRIZWlnaHQgYW5kIGNsaWVudFdpZHRoIGFuZFxuICAgKiByb3VuZGluZyB1cCBzY3JvbGxIZWlnaHQgYW5kIHNjcm9sbFdpZHRoIGNhdXNpbmcgZmFsc2UgcG9zaXRpdmVzXG4gICAqIG9uIGhhc1Njcm9sbGFibGVTcGFjZVxuICAgKi9cbiAgdmFyIFJPVU5ESU5HX1RPTEVSQU5DRSA9IGlzTWljcm9zb2Z0QnJvd3Nlcih3Lm5hdmlnYXRvci51c2VyQWdlbnQpID8gMSA6IDA7XG5cbiAgLyoqXG4gICAqIGNoYW5nZXMgc2Nyb2xsIHBvc2l0aW9uIGluc2lkZSBhbiBlbGVtZW50XG4gICAqIEBtZXRob2Qgc2Nyb2xsRWxlbWVudFxuICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgKi9cbiAgZnVuY3Rpb24gc2Nyb2xsRWxlbWVudCh4LCB5KSB7XG4gICAgdGhpcy5zY3JvbGxMZWZ0ID0geDtcbiAgICB0aGlzLnNjcm9sbFRvcCA9IHk7XG4gIH1cblxuICAvKipcbiAgICogcmV0dXJucyByZXN1bHQgb2YgYXBwbHlpbmcgZWFzZSBtYXRoIGZ1bmN0aW9uIHRvIGEgbnVtYmVyXG4gICAqIEBtZXRob2QgZWFzZVxuICAgKiBAcGFyYW0ge051bWJlcn0ga1xuICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgKi9cbiAgZnVuY3Rpb24gZWFzZShrKSB7XG4gICAgcmV0dXJuIDAuNSAqICgxIC0gTWF0aC5jb3MoTWF0aC5QSSAqIGspKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBpbmRpY2F0ZXMgaWYgYSBzbW9vdGggYmVoYXZpb3Igc2hvdWxkIGJlIGFwcGxpZWRcbiAgICogQG1ldGhvZCBzaG91bGRCYWlsT3V0XG4gICAqIEBwYXJhbSB7TnVtYmVyfE9iamVjdH0gZmlyc3RBcmdcbiAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAqL1xuICBmdW5jdGlvbiBzaG91bGRCYWlsT3V0KGZpcnN0QXJnKSB7XG4gICAgaWYgKFxuICAgICAgZmlyc3RBcmcgPT09IG51bGwgfHxcbiAgICAgIHR5cGVvZiBmaXJzdEFyZyAhPT0gJ29iamVjdCcgfHxcbiAgICAgIGZpcnN0QXJnLmJlaGF2aW9yID09PSB1bmRlZmluZWQgfHxcbiAgICAgIGZpcnN0QXJnLmJlaGF2aW9yID09PSAnYXV0bycgfHxcbiAgICAgIGZpcnN0QXJnLmJlaGF2aW9yID09PSAnaW5zdGFudCdcbiAgICApIHtcbiAgICAgIC8vIGZpcnN0IGFyZ3VtZW50IGlzIG5vdCBhbiBvYmplY3QvbnVsbFxuICAgICAgLy8gb3IgYmVoYXZpb3IgaXMgYXV0bywgaW5zdGFudCBvciB1bmRlZmluZWRcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZmlyc3RBcmcgPT09ICdvYmplY3QnICYmIGZpcnN0QXJnLmJlaGF2aW9yID09PSAnc21vb3RoJykge1xuICAgICAgLy8gZmlyc3QgYXJndW1lbnQgaXMgYW4gb2JqZWN0IGFuZCBiZWhhdmlvciBpcyBzbW9vdGhcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyB0aHJvdyBlcnJvciB3aGVuIGJlaGF2aW9yIGlzIG5vdCBzdXBwb3J0ZWRcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ2JlaGF2aW9yIG1lbWJlciBvZiBTY3JvbGxPcHRpb25zICcgK1xuICAgICAgICBmaXJzdEFyZy5iZWhhdmlvciArXG4gICAgICAgICcgaXMgbm90IGEgdmFsaWQgdmFsdWUgZm9yIGVudW1lcmF0aW9uIFNjcm9sbEJlaGF2aW9yLidcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIGluZGljYXRlcyBpZiBhbiBlbGVtZW50IGhhcyBzY3JvbGxhYmxlIHNwYWNlIGluIHRoZSBwcm92aWRlZCBheGlzXG4gICAqIEBtZXRob2QgaGFzU2Nyb2xsYWJsZVNwYWNlXG4gICAqIEBwYXJhbSB7Tm9kZX0gZWxcbiAgICogQHBhcmFtIHtTdHJpbmd9IGF4aXNcbiAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAqL1xuICBmdW5jdGlvbiBoYXNTY3JvbGxhYmxlU3BhY2UoZWwsIGF4aXMpIHtcbiAgICBpZiAoYXhpcyA9PT0gJ1knKSB7XG4gICAgICByZXR1cm4gZWwuY2xpZW50SGVpZ2h0ICsgUk9VTkRJTkdfVE9MRVJBTkNFIDwgZWwuc2Nyb2xsSGVpZ2h0O1xuICAgIH1cblxuICAgIGlmIChheGlzID09PSAnWCcpIHtcbiAgICAgIHJldHVybiBlbC5jbGllbnRXaWR0aCArIFJPVU5ESU5HX1RPTEVSQU5DRSA8IGVsLnNjcm9sbFdpZHRoO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBpbmRpY2F0ZXMgaWYgYW4gZWxlbWVudCBoYXMgYSBzY3JvbGxhYmxlIG92ZXJmbG93IHByb3BlcnR5IGluIHRoZSBheGlzXG4gICAqIEBtZXRob2QgY2FuT3ZlcmZsb3dcbiAgICogQHBhcmFtIHtOb2RlfSBlbFxuICAgKiBAcGFyYW0ge1N0cmluZ30gYXhpc1xuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICovXG4gIGZ1bmN0aW9uIGNhbk92ZXJmbG93KGVsLCBheGlzKSB7XG4gICAgdmFyIG92ZXJmbG93VmFsdWUgPSB3LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpWydvdmVyZmxvdycgKyBheGlzXTtcblxuICAgIHJldHVybiBvdmVyZmxvd1ZhbHVlID09PSAnYXV0bycgfHwgb3ZlcmZsb3dWYWx1ZSA9PT0gJ3Njcm9sbCc7XG4gIH1cblxuICAvKipcbiAgICogaW5kaWNhdGVzIGlmIGFuIGVsZW1lbnQgY2FuIGJlIHNjcm9sbGVkIGluIGVpdGhlciBheGlzXG4gICAqIEBtZXRob2QgaXNTY3JvbGxhYmxlXG4gICAqIEBwYXJhbSB7Tm9kZX0gZWxcbiAgICogQHBhcmFtIHtTdHJpbmd9IGF4aXNcbiAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAqL1xuICBmdW5jdGlvbiBpc1Njcm9sbGFibGUoZWwpIHtcbiAgICB2YXIgaXNTY3JvbGxhYmxlWSA9IGhhc1Njcm9sbGFibGVTcGFjZShlbCwgJ1knKSAmJiBjYW5PdmVyZmxvdyhlbCwgJ1knKTtcbiAgICB2YXIgaXNTY3JvbGxhYmxlWCA9IGhhc1Njcm9sbGFibGVTcGFjZShlbCwgJ1gnKSAmJiBjYW5PdmVyZmxvdyhlbCwgJ1gnKTtcblxuICAgIHJldHVybiBpc1Njcm9sbGFibGVZIHx8IGlzU2Nyb2xsYWJsZVg7XG4gIH1cblxuICAvKipcbiAgICogZmluZHMgc2Nyb2xsYWJsZSBwYXJlbnQgb2YgYW4gZWxlbWVudFxuICAgKiBAbWV0aG9kIGZpbmRTY3JvbGxhYmxlUGFyZW50XG4gICAqIEBwYXJhbSB7Tm9kZX0gZWxcbiAgICogQHJldHVybnMge05vZGV9IGVsXG4gICAqL1xuICBmdW5jdGlvbiBmaW5kU2Nyb2xsYWJsZVBhcmVudChlbCkge1xuICAgIHZhciBpc0JvZHk7XG5cbiAgICBkbyB7XG4gICAgICBlbCA9IGVsLnBhcmVudE5vZGU7XG5cbiAgICAgIGlzQm9keSA9IGVsID09PSBkLmJvZHk7XG4gICAgfSB3aGlsZSAoaXNCb2R5ID09PSBmYWxzZSAmJiBpc1Njcm9sbGFibGUoZWwpID09PSBmYWxzZSk7XG5cbiAgICBpc0JvZHkgPSBudWxsO1xuXG4gICAgcmV0dXJuIGVsO1xuICB9XG5cbiAgLyoqXG4gICAqIHNlbGYgaW52b2tlZCBmdW5jdGlvbiB0aGF0LCBnaXZlbiBhIGNvbnRleHQsIHN0ZXBzIHRocm91Z2ggc2Nyb2xsaW5nXG4gICAqIEBtZXRob2Qgc3RlcFxuICAgKiBAcGFyYW0ge09iamVjdH0gY29udGV4dFxuICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgKi9cbiAgZnVuY3Rpb24gc3RlcChjb250ZXh0KSB7XG4gICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgdmFyIGN1cnJlbnRYO1xuICAgIHZhciBjdXJyZW50WTtcbiAgICB2YXIgZWxhcHNlZCA9ICh0aW1lIC0gY29udGV4dC5zdGFydFRpbWUpIC8gU0NST0xMX1RJTUU7XG5cbiAgICAvLyBhdm9pZCBlbGFwc2VkIHRpbWVzIGhpZ2hlciB0aGFuIG9uZVxuICAgIGVsYXBzZWQgPSBlbGFwc2VkID4gMSA/IDEgOiBlbGFwc2VkO1xuXG4gICAgLy8gYXBwbHkgZWFzaW5nIHRvIGVsYXBzZWQgdGltZVxuICAgIHZhbHVlID0gZWFzZShlbGFwc2VkKTtcblxuICAgIGN1cnJlbnRYID0gY29udGV4dC5zdGFydFggKyAoY29udGV4dC54IC0gY29udGV4dC5zdGFydFgpICogdmFsdWU7XG4gICAgY3VycmVudFkgPSBjb250ZXh0LnN0YXJ0WSArIChjb250ZXh0LnkgLSBjb250ZXh0LnN0YXJ0WSkgKiB2YWx1ZTtcblxuICAgIGNvbnRleHQubWV0aG9kLmNhbGwoY29udGV4dC5zY3JvbGxhYmxlLCBjdXJyZW50WCwgY3VycmVudFkpO1xuXG4gICAgLy8gc2Nyb2xsIG1vcmUgaWYgd2UgaGF2ZSBub3QgcmVhY2hlZCBvdXIgZGVzdGluYXRpb25cbiAgICBpZiAoY3VycmVudFggIT09IGNvbnRleHQueCB8fCBjdXJyZW50WSAhPT0gY29udGV4dC55KSB7XG4gICAgICB3LnJlcXVlc3RBbmltYXRpb25GcmFtZShzdGVwLmJpbmQodywgY29udGV4dCkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBzY3JvbGxzIHdpbmRvdyBvciBlbGVtZW50IHdpdGggYSBzbW9vdGggYmVoYXZpb3JcbiAgICogQG1ldGhvZCBzbW9vdGhTY3JvbGxcbiAgICogQHBhcmFtIHtPYmplY3R8Tm9kZX0gZWxcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICovXG4gIGZ1bmN0aW9uIHNtb290aFNjcm9sbChlbCwgeCwgeSkge1xuICAgIHZhciBzY3JvbGxhYmxlO1xuICAgIHZhciBzdGFydFg7XG4gICAgdmFyIHN0YXJ0WTtcbiAgICB2YXIgbWV0aG9kO1xuICAgIHZhciBzdGFydFRpbWUgPSBub3coKTtcblxuICAgIC8vIGRlZmluZSBzY3JvbGwgY29udGV4dFxuICAgIGlmIChlbCA9PT0gZC5ib2R5KSB7XG4gICAgICBzY3JvbGxhYmxlID0gdztcbiAgICAgIHN0YXJ0WCA9IHcuc2Nyb2xsWCB8fCB3LnBhZ2VYT2Zmc2V0O1xuICAgICAgc3RhcnRZID0gdy5zY3JvbGxZIHx8IHcucGFnZVlPZmZzZXQ7XG4gICAgICBtZXRob2QgPSBvcmlnaW5hbC5zY3JvbGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjcm9sbGFibGUgPSBlbDtcbiAgICAgIHN0YXJ0WCA9IGVsLnNjcm9sbExlZnQ7XG4gICAgICBzdGFydFkgPSBlbC5zY3JvbGxUb3A7XG4gICAgICBtZXRob2QgPSBzY3JvbGxFbGVtZW50O1xuICAgIH1cblxuICAgIC8vIHNjcm9sbCBsb29waW5nIG92ZXIgYSBmcmFtZVxuICAgIHN0ZXAoe1xuICAgICAgc2Nyb2xsYWJsZTogc2Nyb2xsYWJsZSxcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgc3RhcnRUaW1lOiBzdGFydFRpbWUsXG4gICAgICBzdGFydFg6IHN0YXJ0WCxcbiAgICAgIHN0YXJ0WTogc3RhcnRZLFxuICAgICAgeDogeCxcbiAgICAgIHk6IHlcbiAgICB9KTtcbiAgfVxuXG4gIC8vIE9SSUdJTkFMIE1FVEhPRFMgT1ZFUlJJREVTXG4gIC8vIHcuc2Nyb2xsIGFuZCB3LnNjcm9sbFRvXG4gIHcuc2Nyb2xsID0gdy5zY3JvbGxUbyA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIGF2b2lkIGFjdGlvbiB3aGVuIG5vIGFyZ3VtZW50cyBhcmUgcGFzc2VkXG4gICAgaWYgKGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYXZvaWQgc21vb3RoIGJlaGF2aW9yIGlmIG5vdCByZXF1aXJlZFxuICAgIGlmIChzaG91bGRCYWlsT3V0KGFyZ3VtZW50c1swXSkgPT09IHRydWUpIHtcbiAgICAgIG9yaWdpbmFsLnNjcm9sbC5jYWxsKFxuICAgICAgICB3LFxuICAgICAgICBhcmd1bWVudHNbMF0ubGVmdCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyBhcmd1bWVudHNbMF0ubGVmdFxuICAgICAgICAgIDogdHlwZW9mIGFyZ3VtZW50c1swXSAhPT0gJ29iamVjdCdcbiAgICAgICAgICAgID8gYXJndW1lbnRzWzBdXG4gICAgICAgICAgICA6IHcuc2Nyb2xsWCB8fCB3LnBhZ2VYT2Zmc2V0LFxuICAgICAgICAvLyB1c2UgdG9wIHByb3AsIHNlY29uZCBhcmd1bWVudCBpZiBwcmVzZW50IG9yIGZhbGxiYWNrIHRvIHNjcm9sbFlcbiAgICAgICAgYXJndW1lbnRzWzBdLnRvcCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyBhcmd1bWVudHNbMF0udG9wXG4gICAgICAgICAgOiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBhcmd1bWVudHNbMV1cbiAgICAgICAgICAgIDogdy5zY3JvbGxZIHx8IHcucGFnZVlPZmZzZXRcbiAgICAgICk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBMRVQgVEhFIFNNT09USE5FU1MgQkVHSU4hXG4gICAgc21vb3RoU2Nyb2xsLmNhbGwoXG4gICAgICB3LFxuICAgICAgZC5ib2R5LFxuICAgICAgYXJndW1lbnRzWzBdLmxlZnQgIT09IHVuZGVmaW5lZFxuICAgICAgICA/IH5+YXJndW1lbnRzWzBdLmxlZnRcbiAgICAgICAgOiB3LnNjcm9sbFggfHwgdy5wYWdlWE9mZnNldCxcbiAgICAgIGFyZ3VtZW50c1swXS50b3AgIT09IHVuZGVmaW5lZFxuICAgICAgICA/IH5+YXJndW1lbnRzWzBdLnRvcFxuICAgICAgICA6IHcuc2Nyb2xsWSB8fCB3LnBhZ2VZT2Zmc2V0XG4gICAgKTtcbiAgfTtcblxuICAvLyB3LnNjcm9sbEJ5XG4gIHcuc2Nyb2xsQnkgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBhdm9pZCBhY3Rpb24gd2hlbiBubyBhcmd1bWVudHMgYXJlIHBhc3NlZFxuICAgIGlmIChhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGF2b2lkIHNtb290aCBiZWhhdmlvciBpZiBub3QgcmVxdWlyZWRcbiAgICBpZiAoc2hvdWxkQmFpbE91dChhcmd1bWVudHNbMF0pKSB7XG4gICAgICBvcmlnaW5hbC5zY3JvbGxCeS5jYWxsKFxuICAgICAgICB3LFxuICAgICAgICBhcmd1bWVudHNbMF0ubGVmdCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyBhcmd1bWVudHNbMF0ubGVmdFxuICAgICAgICAgIDogdHlwZW9mIGFyZ3VtZW50c1swXSAhPT0gJ29iamVjdCcgPyBhcmd1bWVudHNbMF0gOiAwLFxuICAgICAgICBhcmd1bWVudHNbMF0udG9wICE9PSB1bmRlZmluZWRcbiAgICAgICAgICA/IGFyZ3VtZW50c1swXS50b3BcbiAgICAgICAgICA6IGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMFxuICAgICAgKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIExFVCBUSEUgU01PT1RITkVTUyBCRUdJTiFcbiAgICBzbW9vdGhTY3JvbGwuY2FsbChcbiAgICAgIHcsXG4gICAgICBkLmJvZHksXG4gICAgICB+fmFyZ3VtZW50c1swXS5sZWZ0ICsgKHcuc2Nyb2xsWCB8fCB3LnBhZ2VYT2Zmc2V0KSxcbiAgICAgIH5+YXJndW1lbnRzWzBdLnRvcCArICh3LnNjcm9sbFkgfHwgdy5wYWdlWU9mZnNldClcbiAgICApO1xuICB9O1xuXG4gIC8vIEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbCBhbmQgRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsVG9cbiAgRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsID0gRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsVG8gPSBmdW5jdGlvbigpIHtcbiAgICAvLyBhdm9pZCBhY3Rpb24gd2hlbiBubyBhcmd1bWVudHMgYXJlIHBhc3NlZFxuICAgIGlmIChhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGF2b2lkIHNtb290aCBiZWhhdmlvciBpZiBub3QgcmVxdWlyZWRcbiAgICBpZiAoc2hvdWxkQmFpbE91dChhcmd1bWVudHNbMF0pID09PSB0cnVlKSB7XG4gICAgICAvLyBpZiBvbmUgbnVtYmVyIGlzIHBhc3NlZCwgdGhyb3cgZXJyb3IgdG8gbWF0Y2ggRmlyZWZveCBpbXBsZW1lbnRhdGlvblxuICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdudW1iZXInICYmIGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignVmFsdWUgY291bGQgbm90IGJlIGNvbnZlcnRlZCcpO1xuICAgICAgfVxuXG4gICAgICBvcmlnaW5hbC5lbGVtZW50U2Nyb2xsLmNhbGwoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIC8vIHVzZSBsZWZ0IHByb3AsIGZpcnN0IG51bWJlciBhcmd1bWVudCBvciBmYWxsYmFjayB0byBzY3JvbGxMZWZ0XG4gICAgICAgIGFyZ3VtZW50c1swXS5sZWZ0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICA/IH5+YXJndW1lbnRzWzBdLmxlZnRcbiAgICAgICAgICA6IHR5cGVvZiBhcmd1bWVudHNbMF0gIT09ICdvYmplY3QnID8gfn5hcmd1bWVudHNbMF0gOiB0aGlzLnNjcm9sbExlZnQsXG4gICAgICAgIC8vIHVzZSB0b3AgcHJvcCwgc2Vjb25kIGFyZ3VtZW50IG9yIGZhbGxiYWNrIHRvIHNjcm9sbFRvcFxuICAgICAgICBhcmd1bWVudHNbMF0udG9wICE9PSB1bmRlZmluZWRcbiAgICAgICAgICA/IH5+YXJndW1lbnRzWzBdLnRvcFxuICAgICAgICAgIDogYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyB+fmFyZ3VtZW50c1sxXSA6IHRoaXMuc2Nyb2xsVG9wXG4gICAgICApO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGxlZnQgPSBhcmd1bWVudHNbMF0ubGVmdDtcbiAgICB2YXIgdG9wID0gYXJndW1lbnRzWzBdLnRvcDtcblxuICAgIC8vIExFVCBUSEUgU01PT1RITkVTUyBCRUdJTiFcbiAgICBzbW9vdGhTY3JvbGwuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICB0aGlzLFxuICAgICAgdHlwZW9mIGxlZnQgPT09ICd1bmRlZmluZWQnID8gdGhpcy5zY3JvbGxMZWZ0IDogfn5sZWZ0LFxuICAgICAgdHlwZW9mIHRvcCA9PT0gJ3VuZGVmaW5lZCcgPyB0aGlzLnNjcm9sbFRvcCA6IH5+dG9wXG4gICAgKTtcbiAgfTtcblxuICAvLyBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxCeVxuICBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxCeSA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIGF2b2lkIGFjdGlvbiB3aGVuIG5vIGFyZ3VtZW50cyBhcmUgcGFzc2VkXG4gICAgaWYgKGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYXZvaWQgc21vb3RoIGJlaGF2aW9yIGlmIG5vdCByZXF1aXJlZFxuICAgIGlmIChzaG91bGRCYWlsT3V0KGFyZ3VtZW50c1swXSkgPT09IHRydWUpIHtcbiAgICAgIG9yaWdpbmFsLmVsZW1lbnRTY3JvbGwuY2FsbChcbiAgICAgICAgdGhpcyxcbiAgICAgICAgYXJndW1lbnRzWzBdLmxlZnQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgID8gfn5hcmd1bWVudHNbMF0ubGVmdCArIHRoaXMuc2Nyb2xsTGVmdFxuICAgICAgICAgIDogfn5hcmd1bWVudHNbMF0gKyB0aGlzLnNjcm9sbExlZnQsXG4gICAgICAgIGFyZ3VtZW50c1swXS50b3AgIT09IHVuZGVmaW5lZFxuICAgICAgICAgID8gfn5hcmd1bWVudHNbMF0udG9wICsgdGhpcy5zY3JvbGxUb3BcbiAgICAgICAgICA6IH5+YXJndW1lbnRzWzFdICsgdGhpcy5zY3JvbGxUb3BcbiAgICAgICk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnNjcm9sbCh7XG4gICAgICBsZWZ0OiB+fmFyZ3VtZW50c1swXS5sZWZ0ICsgdGhpcy5zY3JvbGxMZWZ0LFxuICAgICAgdG9wOiB+fmFyZ3VtZW50c1swXS50b3AgKyB0aGlzLnNjcm9sbFRvcCxcbiAgICAgIGJlaGF2aW9yOiBhcmd1bWVudHNbMF0uYmVoYXZpb3JcbiAgICB9KTtcbiAgfTtcblxuICAvLyBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxJbnRvVmlld1xuICBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxJbnRvVmlldyA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIGF2b2lkIHNtb290aCBiZWhhdmlvciBpZiBub3QgcmVxdWlyZWRcbiAgICBpZiAoc2hvdWxkQmFpbE91dChhcmd1bWVudHNbMF0pID09PSB0cnVlKSB7XG4gICAgICBvcmlnaW5hbC5zY3JvbGxJbnRvVmlldy5jYWxsKFxuICAgICAgICB0aGlzLFxuICAgICAgICBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHRydWUgOiBhcmd1bWVudHNbMF1cbiAgICAgICk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBMRVQgVEhFIFNNT09USE5FU1MgQkVHSU4hXG4gICAgdmFyIHNjcm9sbGFibGVQYXJlbnQgPSBmaW5kU2Nyb2xsYWJsZVBhcmVudCh0aGlzKTtcbiAgICB2YXIgcGFyZW50UmVjdHMgPSBzY3JvbGxhYmxlUGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHZhciBjbGllbnRSZWN0cyA9IHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICBpZiAoc2Nyb2xsYWJsZVBhcmVudCAhPT0gZC5ib2R5KSB7XG4gICAgICAvLyByZXZlYWwgZWxlbWVudCBpbnNpZGUgcGFyZW50XG4gICAgICBzbW9vdGhTY3JvbGwuY2FsbChcbiAgICAgICAgdGhpcyxcbiAgICAgICAgc2Nyb2xsYWJsZVBhcmVudCxcbiAgICAgICAgc2Nyb2xsYWJsZVBhcmVudC5zY3JvbGxMZWZ0ICsgY2xpZW50UmVjdHMubGVmdCAtIHBhcmVudFJlY3RzLmxlZnQsXG4gICAgICAgIHNjcm9sbGFibGVQYXJlbnQuc2Nyb2xsVG9wICsgY2xpZW50UmVjdHMudG9wIC0gcGFyZW50UmVjdHMudG9wXG4gICAgICApO1xuXG4gICAgICAvLyByZXZlYWwgcGFyZW50IGluIHZpZXdwb3J0IHVubGVzcyBpcyBmaXhlZFxuICAgICAgaWYgKHcuZ2V0Q29tcHV0ZWRTdHlsZShzY3JvbGxhYmxlUGFyZW50KS5wb3NpdGlvbiAhPT0gJ2ZpeGVkJykge1xuICAgICAgICB3LnNjcm9sbEJ5KHtcbiAgICAgICAgICBsZWZ0OiBwYXJlbnRSZWN0cy5sZWZ0LFxuICAgICAgICAgIHRvcDogcGFyZW50UmVjdHMudG9wLFxuICAgICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gcmV2ZWFsIGVsZW1lbnQgaW4gdmlld3BvcnRcbiAgICAgIHcuc2Nyb2xsQnkoe1xuICAgICAgICBsZWZ0OiBjbGllbnRSZWN0cy5sZWZ0LFxuICAgICAgICB0b3A6IGNsaWVudFJlY3RzLnRvcCxcbiAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgLy8gY29tbW9uanNcbiAgbW9kdWxlLmV4cG9ydHMgPSB7IHBvbHlmaWxsOiBwb2x5ZmlsbCB9O1xufSBlbHNlIHtcbiAgLy8gZ2xvYmFsXG4gIHBvbHlmaWxsKCk7XG59XG4iLCJjb25zdCB3b3Jrc0J0bkZvb3RlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3b3Jrcy1idG4tZm9vdGVyJyk7XG5jb25zdCBza2lsbHNCdG5Gb290ZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2tpbGxzLWJ0bi1mb290ZXInKTtcbmNvbnN0IGdpdGh1YkJ0bkZvb3RlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnaXRodWItYnRuLWZvb3RlcicpO1xuXG53b3Jrc0J0bkZvb3Rlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHdpbmRvdy5zY3JvbGwoe1xuICAgICAgICB0b3A6IHdvcmtzU2VjdGlvbi5vZmZzZXRUb3AsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgIH0pXG59KVxuXG5za2lsbHNCdG5Gb290ZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB3aW5kb3cuc2Nyb2xsKHtcbiAgICAgICAgdG9wOiBza2lsbHNTZWN0aW9uLm9mZnNldFRvcCxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnXG4gICAgfSlcbn0pXG5cbmdpdGh1YkJ0bkZvb3Rlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHdpbmRvdy5zY3JvbGwoe1xuICAgICAgICB0b3A6IGdpdGh1YlNlY3Rpb24ub2Zmc2V0VG9wLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCdcbiAgICB9KVxufSlcbiIsImNvbnN0IHdvcmtzQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3dvcmtzLWJ0bicpO1xuY29uc3Qgc2tpbGxzQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NraWxscy1idG4nKTtcbmNvbnN0IGdpdGh1YkJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnaXRodWItYnRuJyk7XG5jb25zdCBidXJnZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdidXJnZXInKVswXTtcbmNvbnN0IGlucHV0QnVyZ2VyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lucHV0LWJ1cmdlcicpO1xuY29uc3QgaGVhZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnaGVhZGVyJylbMF07XG5cbndvcmtzQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgYnVyZ2VyLmNsYXNzTGlzdC50b2dnbGUoJ29wZW4nKTtcbiAgICBpbnB1dEJ1cmdlci5jaGVja2VkID0gZmFsc2U7XG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdtb2RhbC1vcGVuJyk7XG4gICAgd2luZG93LnNjcm9sbCh7XG4gICAgICAgIHRvcDogd29ya3NTZWN0aW9uLm9mZnNldFRvcCxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnXG4gICAgfSlcbn0pO1xuXG5za2lsbHNCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBidXJnZXIuY2xhc3NMaXN0LnRvZ2dsZSgnb3BlbicpO1xuICAgIGlucHV0QnVyZ2VyLmNoZWNrZWQgPSBmYWxzZTtcbiAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ21vZGFsLW9wZW4nKTtcbiAgICB3aW5kb3cuc2Nyb2xsKHtcbiAgICAgICAgdG9wOiBza2lsbHNTZWN0aW9uLm9mZnNldFRvcCxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnXG4gICAgfSlcbn0pXG5cbmdpdGh1YkJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGJ1cmdlci5jbGFzc0xpc3QudG9nZ2xlKCdvcGVuJyk7XG4gICAgaW5wdXRCdXJnZXIuY2hlY2tlZCA9IGZhbHNlO1xuICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnbW9kYWwtb3BlbicpO1xuICAgIHdpbmRvdy5zY3JvbGwoe1xuICAgICAgICB0b3A6IGdpdGh1YlNlY3Rpb24ub2Zmc2V0VG9wLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCdcbiAgICB9KVxufSlcblxuaGVhZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICBpZiAoZS50YXJnZXQgPT09IGhlYWRlciB8fCBlLnRhcmdldCA9PT0gaGVhZGVyLmNoaWxkcmVuWzBdKSB7XG4gICAgICAgIGJ1cmdlci5jbGFzc0xpc3QucmVtb3ZlKCdvcGVuJyk7XG4gICAgICAgIGlucHV0QnVyZ2VyLmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdtb2RhbC1vcGVuJyk7XG4gICAgfVxufSlcblxuLy8g0JDQvdC40LzQsNGG0LjRjyDQvtGC0LrRgNGL0YLQuNGPINCx0L7QutC+0LLQvtCz0L4g0LzQtdC90Y5cbmJ1cmdlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgYnVyZ2VyLmNsYXNzTGlzdC50b2dnbGUoJ29wZW4nKTtcbiAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC50b2dnbGUoJ21vZGFsLW9wZW4nKTtcbn0pXG4iLCJjb25zdCBjb2xvcnMgPSB7XG4gICAgXCJNZXJjdXJ5XCI6IFwiI2ZmMmIyYlwiLFxuICAgIFwiVHlwZVNjcmlwdFwiOiBcIiMyYjc0ODlcIixcbiAgICBcIlB1cmVCYXNpY1wiOiBcIiM1YTY5ODZcIixcbiAgICBcIk9iamVjdGl2ZS1DKytcIjogXCIjNjg2NmZiXCIsXG4gICAgXCJTZWxmXCI6IFwiIzA1NzlhYVwiLFxuICAgIFwiZWRuXCI6IFwiI2RiNTg1NVwiLFxuICAgIFwiTmV3TGlzcFwiOiBcIiM4N0FFRDdcIixcbiAgICBcIkp1cHl0ZXIgTm90ZWJvb2tcIjogXCIjREE1QjBCXCIsXG4gICAgXCJSZWJvbFwiOiBcIiMzNThhNWJcIixcbiAgICBcIkZyZWdlXCI6IFwiIzAwY2FmZVwiLFxuICAgIFwiRGFydFwiOiBcIiMwMEI0QUJcIixcbiAgICBcIkFzcGVjdEpcIjogXCIjYTk1N2IwXCIsXG4gICAgXCJTaGVsbFwiOiBcIiM4OWUwNTFcIixcbiAgICBcIldlYiBPbnRvbG9neSBMYW5ndWFnZVwiOiBcIiM5Y2M5ZGRcIixcbiAgICBcInhCYXNlXCI6IFwiIzQwM2E0MFwiLFxuICAgIFwiRWlmZmVsXCI6IFwiIzk0NmQ1N1wiLFxuICAgIFwiTml4XCI6IFwiIzdlN2VmZlwiLFxuICAgIFwiUkFNTFwiOiBcIiM3N2Q5ZmJcIixcbiAgICBcIk1UTUxcIjogXCIjYjdlMWY0XCIsXG4gICAgXCJSYWNrZXRcIjogXCIjMjIyMjhmXCIsXG4gICAgXCJFbGl4aXJcIjogXCIjNmU0YTdlXCIsXG4gICAgXCJTQVNcIjogXCIjQjM0OTM2XCIsXG4gICAgXCJBZ2RhXCI6IFwiIzMxNTY2NVwiLFxuICAgIFwid2lzcFwiOiBcIiM3NTgyRDFcIixcbiAgICBcIkRcIjogXCIjYmE1OTVlXCIsXG4gICAgXCJLb3RsaW5cIjogXCIjRjE4RTMzXCIsXG4gICAgXCJPcGFsXCI6IFwiI2Y3ZWRlMFwiLFxuICAgIFwiQ3J5c3RhbFwiOiBcIiM3NzY3OTFcIixcbiAgICBcIk9iamVjdGl2ZS1DXCI6IFwiIzQzOGVmZlwiLFxuICAgIFwiQ29sZEZ1c2lvbiBDRkNcIjogXCIjZWQyY2Q2XCIsXG4gICAgXCJPelwiOiBcIiNmYWI3MzhcIixcbiAgICBcIk1pcmFoXCI6IFwiI2M3YTkzOFwiLFxuICAgIFwiT2JqZWN0aXZlLUpcIjogXCIjZmYwYzVhXCIsXG4gICAgXCJHb3N1XCI6IFwiIzgyOTM3ZlwiLFxuICAgIFwiRnJlZU1hcmtlclwiOiBcIiMwMDUwYjJcIixcbiAgICBcIlJ1YnlcIjogXCIjNzAxNTE2XCIsXG4gICAgXCJDb21wb25lbnQgUGFzY2FsXCI6IFwiI2IwY2U0ZVwiLFxuICAgIFwiQXJjXCI6IFwiI2FhMmFmZVwiLFxuICAgIFwiQnJhaW5mdWNrXCI6IFwiIzJGMjUzMFwiLFxuICAgIFwiTml0XCI6IFwiIzAwOTkxN1wiLFxuICAgIFwiQVBMXCI6IFwiIzVBODE2NFwiLFxuICAgIFwiR29cIjogXCIjMzc1ZWFiXCIsXG4gICAgXCJWaXN1YWwgQmFzaWNcIjogXCIjOTQ1ZGI3XCIsXG4gICAgXCJQSFBcIjogXCIjNEY1RDk1XCIsXG4gICAgXCJDaXJydVwiOiBcIiNjY2NjZmZcIixcbiAgICBcIlNRRlwiOiBcIiMzRjNGM0ZcIixcbiAgICBcIkdseXBoXCI6IFwiI2U0Y2M5OFwiLFxuICAgIFwiSmF2YVwiOiBcIiNiMDcyMTlcIixcbiAgICBcIk1BWFNjcmlwdFwiOiBcIiMwMGE2YTZcIixcbiAgICBcIlNjYWxhXCI6IFwiI0RDMzIyRlwiLFxuICAgIFwiTWFrZWZpbGVcIjogXCIjNDI3ODE5XCIsXG4gICAgXCJDb2xkRnVzaW9uXCI6IFwiI2VkMmNkNlwiLFxuICAgIFwiUGVybFwiOiBcIiMwMjk4YzNcIixcbiAgICBcIkx1YVwiOiBcIiMwMDAwODBcIixcbiAgICBcIlZ1ZVwiOiBcIiMyYzNlNTBcIixcbiAgICBcIlZlcmlsb2dcIjogXCIjYjJiN2Y4XCIsXG4gICAgXCJGYWN0b3JcIjogXCIjNjM2NzQ2XCIsXG4gICAgXCJIYXhlXCI6IFwiI2RmNzkwMFwiLFxuICAgIFwiUHVyZSBEYXRhXCI6IFwiIzkxZGU3OVwiLFxuICAgIFwiRm9ydGhcIjogXCIjMzQxNzA4XCIsXG4gICAgXCJSZWRcIjogXCIjZWUwMDAwXCIsXG4gICAgXCJIeVwiOiBcIiM3NzkwQjJcIixcbiAgICBcIlZvbHRcIjogXCIjMUYxRjFGXCIsXG4gICAgXCJMU0xcIjogXCIjM2Q5OTcwXCIsXG4gICAgXCJlQ1wiOiBcIiM5MTM5NjBcIixcbiAgICBcIkNvZmZlZVNjcmlwdFwiOiBcIiMyNDQ3NzZcIixcbiAgICBcIkhUTUxcIjogXCIjZTQ0YjIzXCIsXG4gICAgXCJMZXhcIjogXCIjREJDQTAwXCIsXG4gICAgXCJBUEkgQmx1ZXByaW50XCI6IFwiIzJBQ0NBOFwiLFxuICAgIFwiU3dpZnRcIjogXCIjZmZhYzQ1XCIsXG4gICAgXCJDXCI6IFwiIzU1NTU1NVwiLFxuICAgIFwiQXV0b0hvdGtleVwiOiBcIiM2NTk0YjlcIixcbiAgICBcIklzYWJlbGxlXCI6IFwiI0ZFRkUwMFwiLFxuICAgIFwiTWV0YWxcIjogXCIjOGYxNGU5XCIsXG4gICAgXCJDbGFyaW9uXCI6IFwiI2RiOTAxZVwiLFxuICAgIFwiSlNPTmlxXCI6IFwiIzQwZDQ3ZVwiLFxuICAgIFwiQm9vXCI6IFwiI2Q0YmVjMVwiLFxuICAgIFwiQXV0b0l0XCI6IFwiIzFDMzU1MlwiLFxuICAgIFwiQ2xvanVyZVwiOiBcIiNkYjU4NTVcIixcbiAgICBcIlJ1c3RcIjogXCIjZGVhNTg0XCIsXG4gICAgXCJQcm9sb2dcIjogXCIjNzQyODNjXCIsXG4gICAgXCJTb3VyY2VQYXduXCI6IFwiIzVjNzYxMVwiLFxuICAgIFwiQU1QTFwiOiBcIiNFNkVGQkJcIixcbiAgICBcIkZPUlRSQU5cIjogXCIjNGQ0MWIxXCIsXG4gICAgXCJBTlRMUlwiOiBcIiM5REMzRkZcIixcbiAgICBcIkhhcmJvdXJcIjogXCIjMGU2MGUzXCIsXG4gICAgXCJUY2xcIjogXCIjZTRjYzk4XCIsXG4gICAgXCJCbGl0ek1heFwiOiBcIiNjZDY0MDBcIixcbiAgICBcIlBpZ0xhdGluXCI6IFwiI2ZjZDdkZVwiLFxuICAgIFwiTGFzc29cIjogXCIjOTk5OTk5XCIsXG4gICAgXCJFQ0xcIjogXCIjOGExMjY3XCIsXG4gICAgXCJWSERMXCI6IFwiI2FkYjJjYlwiLFxuICAgIFwiRWxtXCI6IFwiIzYwQjVDQ1wiLFxuICAgIFwiUHJvcGVsbGVyIFNwaW5cIjogXCIjN2ZhMmE3XCIsXG4gICAgXCJYMTBcIjogXCIjNEI2QkVGXCIsXG4gICAgXCJJRExcIjogXCIjYTM1MjJmXCIsXG4gICAgXCJBVFNcIjogXCIjMWFjNjIwXCIsXG4gICAgXCJBZGFcIjogXCIjMDJmODhjXCIsXG4gICAgXCJVbml0eTNEIEFzc2V0XCI6IFwiI2FiNjlhMVwiLFxuICAgIFwiTnVcIjogXCIjYzlkZjQwXCIsXG4gICAgXCJMRkVcIjogXCIjMDA0MjAwXCIsXG4gICAgXCJTdXBlckNvbGxpZGVyXCI6IFwiIzQ2MzkwYlwiLFxuICAgIFwiT3h5Z2VuZVwiOiBcIiNjZGQwZTNcIixcbiAgICBcIkFTUFwiOiBcIiM2YTQwZmRcIixcbiAgICBcIkFzc2VtYmx5XCI6IFwiIzZFNEMxM1wiLFxuICAgIFwiR251cGxvdFwiOiBcIiNmMGE5ZjBcIixcbiAgICBcIkpGbGV4XCI6IFwiI0RCQ0EwMFwiLFxuICAgIFwiTmV0TGlueFwiOiBcIiMwYWEwZmZcIixcbiAgICBcIlR1cmluZ1wiOiBcIiM0NWY3MTVcIixcbiAgICBcIlZhbGFcIjogXCIjZmJlNWNkXCIsXG4gICAgXCJQcm9jZXNzaW5nXCI6IFwiIzAwOTZEOFwiLFxuICAgIFwiQXJkdWlub1wiOiBcIiNiZDc5ZDFcIixcbiAgICBcIkZMVVhcIjogXCIjODhjY2ZmXCIsXG4gICAgXCJOZXRMb2dvXCI6IFwiI2ZmNjM3NVwiLFxuICAgIFwiQyBTaGFycFwiOiBcIiMxNzg2MDBcIixcbiAgICBcIkNTU1wiOiBcIiM1NjNkN2NcIixcbiAgICBcIkVtYWNzIExpc3BcIjogXCIjYzA2NWRiXCIsXG4gICAgXCJTdGFuXCI6IFwiI2IyMDExZFwiLFxuICAgIFwiU2FsdFN0YWNrXCI6IFwiIzY0NjQ2NFwiLFxuICAgIFwiUU1MXCI6IFwiIzQ0YTUxY1wiLFxuICAgIFwiUGlrZVwiOiBcIiMwMDUzOTBcIixcbiAgICBcIkxPTENPREVcIjogXCIjY2M5OTAwXCIsXG4gICAgXCJvb2NcIjogXCIjYjBiNzdlXCIsXG4gICAgXCJIYW5kbGViYXJzXCI6IFwiIzAxYTlkNlwiLFxuICAgIFwiSlwiOiBcIiM5RUVERkZcIixcbiAgICBcIk1hc2tcIjogXCIjZjk3NzMyXCIsXG4gICAgXCJFbWJlclNjcmlwdFwiOiBcIiNGRkY0RjNcIixcbiAgICBcIlRlWFwiOiBcIiMzRDYxMTdcIixcbiAgICBcIk5lbWVybGVcIjogXCIjM2QzYzZlXCIsXG4gICAgXCJLUkxcIjogXCIjMjg0MzFmXCIsXG4gICAgXCJSZW4nUHlcIjogXCIjZmY3ZjdmXCIsXG4gICAgXCJVbmlmaWVkIFBhcmFsbGVsIENcIjogXCIjNGUzNjE3XCIsXG4gICAgXCJHb2xvXCI6IFwiIzg4NTYyQVwiLFxuICAgIFwiRmFuY3lcIjogXCIjN2I5ZGI0XCIsXG4gICAgXCJPQ2FtbFwiOiBcIiMzYmUxMzNcIixcbiAgICBcIlNoZW5cIjogXCIjMTIwRjE0XCIsXG4gICAgXCJQYXNjYWxcIjogXCIjYjBjZTRlXCIsXG4gICAgXCJGI1wiOiBcIiNiODQ1ZmNcIixcbiAgICBcIlB1cHBldFwiOiBcIiMzMDJCNkRcIixcbiAgICBcIkFjdGlvblNjcmlwdFwiOiBcIiM4ODJCMEZcIixcbiAgICBcIkRpZmZcIjogXCIjODhkZGRkXCIsXG4gICAgXCJSYWdlbCBpbiBSdWJ5IEhvc3RcIjogXCIjOWQ1MjAwXCIsXG4gICAgXCJGYW50b21cIjogXCIjZGJkZWQ1XCIsXG4gICAgXCJaZXBoaXJcIjogXCIjMTE4ZjllXCIsXG4gICAgXCJDbGlja1wiOiBcIiNFNEU2RjNcIixcbiAgICBcIlNtYWxsdGFsa1wiOiBcIiM1OTY3MDZcIixcbiAgICBcIkRNXCI6IFwiIzQ0NzI2NVwiLFxuICAgIFwiSW9rZVwiOiBcIiMwNzgxOTNcIixcbiAgICBcIlBvZ29TY3JpcHRcIjogXCIjZDgwMDc0XCIsXG4gICAgXCJMaXZlU2NyaXB0XCI6IFwiIzQ5OTg4NlwiLFxuICAgIFwiSmF2YVNjcmlwdFwiOiBcIiNmMWUwNWFcIixcbiAgICBcIlZpbUxcIjogXCIjMTk5ZjRiXCIsXG4gICAgXCJQdXJlU2NyaXB0XCI6IFwiIzFEMjIyRFwiLFxuICAgIFwiQUJBUFwiOiBcIiNFODI3NEJcIixcbiAgICBcIk1hdGxhYlwiOiBcIiNiYjkyYWNcIixcbiAgICBcIlNsYXNoXCI6IFwiIzAwN2VmZlwiLFxuICAgIFwiUlwiOiBcIiMxOThjZTdcIixcbiAgICBcIkVybGFuZ1wiOiBcIiNCODM5OThcIixcbiAgICBcIlBhblwiOiBcIiNjYzAwMDBcIixcbiAgICBcIkxvb2tNTFwiOiBcIiM2NTJCODFcIixcbiAgICBcIkVhZ2xlXCI6IFwiIzgxNEMwNVwiLFxuICAgIFwiU2NoZW1lXCI6IFwiIzFlNGFlY1wiLFxuICAgIFwiUExTUUxcIjogXCIjZGFkOGQ4XCIsXG4gICAgXCJQeXRob25cIjogXCIjMzU3MkE1XCIsXG4gICAgXCJNYXhcIjogXCIjYzRhNzljXCIsXG4gICAgXCJDb21tb24gTGlzcFwiOiBcIiMzZmI2OGJcIixcbiAgICBcIkxhdHRlXCI6IFwiI0E4RkY5N1wiLFxuICAgIFwiWFF1ZXJ5XCI6IFwiIzUyMzJlN1wiLFxuICAgIFwiT21ncm9mbFwiOiBcIiNjYWJiZmZcIixcbiAgICBcIlhDXCI6IFwiIzk5REEwN1wiLFxuICAgIFwiTmltcm9kXCI6IFwiIzM3Nzc1YlwiLFxuICAgIFwiU3lzdGVtVmVyaWxvZ1wiOiBcIiNEQUUxQzJcIixcbiAgICBcIkNoYXBlbFwiOiBcIiM4ZGM2M2ZcIixcbiAgICBcIkdyb292eVwiOiBcIiNlNjlmNTZcIixcbiAgICBcIkR5bGFuXCI6IFwiIzZjNjE2ZVwiLFxuICAgIFwiRVwiOiBcIiNjY2NlMzVcIixcbiAgICBcIlBhcnJvdFwiOiBcIiNmM2NhMGFcIixcbiAgICBcIkdyYW1tYXRpY2FsIEZyYW1ld29ya1wiOiBcIiM3OWFhN2FcIixcbiAgICBcIkdhbWUgTWFrZXIgTGFuZ3VhZ2VcIjogXCIjOGZiMjAwXCIsXG4gICAgXCJQYXB5cnVzXCI6IFwiIzY2MDBjY1wiLFxuICAgIFwiTmV0TGlueCtFUkJcIjogXCIjNzQ3ZmFhXCIsXG4gICAgXCJDbGVhblwiOiBcIiMzRjg1QUZcIixcbiAgICBcIkFsbG95XCI6IFwiIzY0QzgwMFwiLFxuICAgIFwiU3F1aXJyZWxcIjogXCIjODAwMDAwXCIsXG4gICAgXCJQQVdOXCI6IFwiI2RiYjI4NFwiLFxuICAgIFwiVW5yZWFsU2NyaXB0XCI6IFwiI2E1NGM0ZFwiLFxuICAgIFwiU3RhbmRhcmQgTUxcIjogXCIjZGM1NjZkXCIsXG4gICAgXCJTbGltXCI6IFwiI2ZmOGY3N1wiLFxuICAgIFwiUGVybDZcIjogXCIjMDAwMGZiXCIsXG4gICAgXCJKdWxpYVwiOiBcIiNhMjcwYmFcIixcbiAgICBcIkhhc2tlbGxcIjogXCIjMjliNTQ0XCIsXG4gICAgXCJOQ0xcIjogXCIjMjg0MzFmXCIsXG4gICAgXCJJb1wiOiBcIiNhOTE4OGRcIixcbiAgICBcIlJvdWdlXCI6IFwiI2NjMDA4OFwiLFxuICAgIFwiQysrXCI6IFwiI2YzNGI3ZFwiLFxuICAgIFwiQUdTIFNjcmlwdFwiOiBcIiNCOUQ5RkZcIixcbiAgICBcIkRvZ2VzY3JpcHRcIjogXCIjY2NhNzYwXCIsXG4gICAgXCJuZXNDXCI6IFwiIzk0QjBDN1wiXG59XG4iLCIgY29uc3QgdXJsID0gJ2h0dHBzOi8vYXBpLmdpdGh1Yi5jb20nO1xuIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vdm5kLmdpdGh1Yi52Mytqc29uJyxcbiAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgfVxuIH07XG5cbiBjb25zdCBhcnRlbSA9IFwiaXpvc2ltb3ZcIjtcbiBjb25zdCBpbHlhID0gXCJ6ZWtjaGFuXCI7XG4gY29uc3QgdXNlciA9IGlseWE7XG4gY29uc3QgcmVwb3NBbW91bnQgPSA0O1xuIGNvbnN0IHNwaW5uZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3Bpbm5lcicpO1xuIGxldCBhbW91bnRQYWdlcyA9IG51bGw7XG4gbGV0IGN1cnJlbnRQYWdlTnVtID0gMTtcblxuIC8vINCh0L7Qt9C00LDQvdC40LUg0YHQsNC80L7Qs9C+IERPTS3RjdC70LXQvNC10L3RgtCwIC0g0YDQtdC/0L7Qt9C40YLQvtGA0LjRjyDRgSDQuNC90YTQvtGA0LzQsNGG0LjQtdC5INC+INC90ZHQvFxuIGNvbnN0IGNyZWF0ZVJlcG9JdGVtID0gZGF0YSA9PiB7XG5cbiAgICAgY29uc3QgcmVwb0l0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgcmVwb0l0ZW0uY2xhc3NMaXN0LmFkZCgnZ2l0aHViX19yZXBvc2l0b3J5LWl0ZW0nKTtcbiAgICAgcmVwb0l0ZW0uaW5uZXJIVE1MID0gYFxuICAgICAgICAgPGEgaHJlZj1cIiR7ZGF0YS51cmx9XCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJnaXRodWJfX3JlcG9zaXRvcnktaXRlbS1uYW1lXCI+JHtkYXRhLm5hbWV9PC9hPlxuICAgICAgICAgPGRpdiBjbGFzcz1cImdpdGh1Yl9faXRlbS1kZXNjcmlwdGlvblwiPlxuICAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOiAke2RhdGEuY29sb3J9XCIgY2xhc3M9XCJnaXRodWJfX2xhbmd1YWdlLWNvbG9yXCI+PC9kaXY+XG4gICAgICAgICAgICAgPHAgY2xhc3M9XCJnaXRodWJfX2xhbmd1YWdlXCI+JHtkYXRhLmxhbmd9PC9wPlxuICAgICAgICAgICAgICR7ZGF0YS5zdGFycyA/ICc8cCBjbGFzcz1cImdpdGh1Yl9fc3RhcnNcIj4nICsgZGF0YS5zdGFycyArICc8L3A+JyA6ICcnfVxuICAgICAgICAgICAgICR7ZGF0YS5mb3JrcyA/ICc8cCBjbGFzcz1cImdpdGh1Yl9fZm9ya3NcIj4nICsgZGF0YS5mb3JrcyArICc8L3A+JyA6ICcnfVxuICAgICAgICAgICAgIDxwIGNsYXNzPVwiZ2l0aHViX19sYXN0LXVwZGF0ZVwiPlVwZGF0ZWQgb24gJHtnZXRDdXN0b21EYXRlKGRhdGEudXBkYXRlZCl9PC9wPlxuICAgICAgICAgPC9kaXY+YFxuICAgICByZXR1cm4gcmVwb0l0ZW07XG4gfTtcblxuIC8vINCf0YDQtdC+0LHRgNCw0LfQvtCy0LDQvdC40LUg0LTQsNGC0Ysg0LIg0L3QtdC+0LHRhdC+0LTQuNC80YvQuSDRhNC+0YDQvNCw0YJcbiBjb25zdCBnZXRDdXN0b21EYXRlID0gZGF0ZSA9PiB7XG4gICAgIGNvbnN0IG1vbnRocyA9IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnXTtcbiAgICAgY29uc3QgbmV3RGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgICByZXR1cm4gYCR7bmV3RGF0ZS5nZXREYXRlKCl9ICR7bW9udGhzW25ld0RhdGUuZ2V0TW9udGgoKV19ICR7MTkwMCArIG5ld0RhdGUuZ2V0WWVhcigpfWBcbiB9O1xuXG4gLy8g0KHQvtC30LTQsNC90LjQtSAnLi4uJyDQsiDQvdGD0LzQtdGA0LDRhtC40Lgg0YHRgtGA0LDQvdC40YYgKNC60L7Qs9C00LAg0LHQvtC70YzRiNC1IDMg0YHRgtGA0LDQvdC40YYpXG4gY29uc3QgY3JlYXRlRW1wdHlQYWdlRWxlbSA9ICgpID0+IHtcbiAgICAgY29uc3QgZW1wdHlQYWdlRWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgZW1wdHlQYWdlRWxlbS5jbGFzc0xpc3QuYWRkKCdwYWdpbmF0aW9uLWxpc3RfX2l0ZW0nKTtcbiAgICAgZW1wdHlQYWdlRWxlbS5pbm5lckhUTUwgPSAnJmhlbGxpcDsnO1xuICAgICByZXR1cm4gZW1wdHlQYWdlRWxlbTtcbiB9XG5cbiAvLyDQodC+0LfQtNCw0L3QuNC1INGN0LvQtdC80LXQvdGC0LAsINC90YPQvNC10YDRg9GO0YnQtdCz0L4g0YHRgtGA0LDQvdC40YbRg1xuIGNvbnN0IGNyZWF0ZVBhZ2VFbGVtID0gbnVtID0+IHtcbiAgICAgY29uc3QgcGFnZUVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgIHBhZ2VFbGVtLmNsYXNzTGlzdC5hZGQoJ3BhZ2luYXRpb24tbGlzdF9faXRlbScpO1xuICAgICBwYWdlRWxlbS5pbm5lckhUTUwgPSBgJHtudW19YDtcbiAgICAgcGFnZUVsZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICAgY29uc3QgYWxsUHJldmlvdXNSZXBvc0l0ZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmdpdGh1Yl9fcmVwb3NpdG9yeS1pdGVtJyk7XG4gICAgICAgICBhbGxQcmV2aW91c1JlcG9zSXRlbXMuZm9yRWFjaChlbGVtID0+IGVsZW0ucmVtb3ZlKCkpO1xuICAgICB9KVxuXG4gICAgIGlmIChudW0gPT0gY3VycmVudFBhZ2VOdW0pIHtcbiAgICAgICAgIHBhZ2VFbGVtLmNsYXNzTGlzdC5hZGQoJ3BhZ2luYXRpb24tbGlzdF9faXRlbV9hY3RpdmUnKTtcbiAgICAgfVxuXG4gICAgIHBhZ2VFbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcGFnaW5hdGlvbkNsaWNrSGFuZGxlcik7XG4gICAgIHJldHVybiBwYWdlRWxlbTtcbiB9XG5cbi8vINCf0L7Qu9GD0YfQtdC90LjQtSDRgNC10L/QvtC30LjRgtC+0YDQuNC10LIg0L3QsCDQutC+0L3QutGA0LXRgtC90L7QuSDRgdGC0YDQsNC90LjRhtC1XG4gICAgY29uc3QgZ2V0TmV3R2l0aHViUGFnZSA9IHBhZ2VOdW0gPT4ge1xuICAgICAgICBzcGlubmVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuXG4gICAgICAgIGZldGNoKGAke3VybH0vdXNlcnMvJHt1c2VyfS9yZXBvcz9wYWdlPSR7cGFnZU51bX0mcGVyX3BhZ2U9JHtyZXBvc0Ftb3VudH1gLCBvcHRpb25zKVxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuXG4gICAgICAgICAgICAgICAgc3Bpbm5lci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG5cbiAgICAgICAgICAgIH0pLnRoZW4ocmVzID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYWdpbmF0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBhZ2luYXRpb24tbGlzdCcpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFyciA9IFtdO1xuXG4gICAgICAgICAgICAgICAgcmVzLmZvckVhY2goZWxlbSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGFyci5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBlbGVtLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgZm9ya3M6IGVsZW0uZm9ya3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgbGFuZzogZWxlbS5sYW5ndWFnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkOiBlbGVtLnVwZGF0ZWRfYXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnM6IGVsZW0uc3RhcmdhemVyc19jb3VudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogY29sb3JzW2VsZW0ubGFuZ3VhZ2VdLFxuICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogZWxlbS5odG1sX3VybFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICBhcnIuZm9yRWFjaCgoZWxlbSwgaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBnaXRIdWJSZXBvc0xpc3QuaW5zZXJ0QmVmb3JlKGNyZWF0ZVJlcG9JdGVtKGVsZW0pLCBwYWdpbmF0aW9uKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pXG4gICAgfTtcblxuIC8vINCf0L7Qu9GD0YfQtdC90LjQtSDQutC+0LvQuNGH0LXRgdGC0LLQsCDRgdGC0YDQsNC90LjRhiDQsiDQt9Cw0LLQuNGB0LjQvNC+0YHRgtC4INC+0YIg0L7QsdGJ0LXQs9C+INGH0LjRgdC70LAg0YDQtdC/0L7Qt9C40YLQvtGA0LjQtdCyXG5mZXRjaChgJHt1cmx9L3VzZXJzLyR7dXNlcn1gLCBvcHRpb25zKS50aGVuKHJlc3BvbnNlID0+IHtcbiAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xufSkudGhlbihyZXMgPT4ge1xuICAgIGFtb3VudFBhZ2VzID0gTWF0aC5jZWlsKHJlcy5wdWJsaWNfcmVwb3MgLyByZXBvc0Ftb3VudCk7XG4gICAgc2V0UGFnaW5hdGlvbihjdXJyZW50UGFnZU51bSwgYW1vdW50UGFnZXMpO1xufSk7XG5cbi8vINCe0LHRgNCw0LHQvtGC0LrQsCDQutC70LjQutCwINC/0L4g0L3QvtC80LXRgNGDINGB0YLRgNCw0L3QuNGG0YsgKNGD0LTQsNC70LXQvdC40LUg0YHRgtCw0YDQvtCz0L4g0LHQu9C+0LrQsCDRgdC+INGB0YLRgNCw0L3QuNGG0LDQvNC4KVxuY29uc3QgcGFnaW5hdGlvbkNsaWNrSGFuZGxlciA9IGV2ZW50ID0+IHtcbiAgICBjdXJyZW50UGFnZU51bSA9IGV2ZW50LnRhcmdldC5pbm5lckhUTUw7XG4gICAgY29uc3QgZ2l0SHViUmVwb3NMaXN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dpdEh1YlJlcG9zTGlzdCcpO1xuICAgIGNvbnN0IHBhZ2luYXRpb25CbG9jayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wYWdpbmF0aW9uLWxpc3QnKTtcbiAgICBjb25zdCBhbGxQcmV2aW91c1BhZ2VzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnBhZ2luYXRpb24tbGlzdF9faXRlbScpO1xuXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgdG9wOiBnaXRodWJTZWN0aW9uLm9mZnNldFRvcCxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnXG4gICAgfVxuICAgIHdpbmRvdy5zY3JvbGwob3B0aW9ucyk7XG5cbiAgICBhbGxQcmV2aW91c1BhZ2VzLmZvckVhY2goZWxlbSA9PiBlbGVtLnJlbW92ZSgpKTtcbiAgICBwYWdpbmF0aW9uQmxvY2sucmVtb3ZlKCk7XG5cbiAgICBzZXRQYWdpbmF0aW9uKGN1cnJlbnRQYWdlTnVtLCBhbW91bnRQYWdlcyk7XG59XG5cbi8vINCh0L7Qt9C00LDQvdC40LUg0L3QvtCy0L7Qs9C+INCx0LvQvtC60LAg0YHQviDRgdGC0YDQsNC90LjRhtCw0LzQuFxuY29uc3Qgc2V0UGFnaW5hdGlvbiA9IChjdXJyZW50UGFnZU51bSwgYW1vdW50UGFnZXMpID0+IHtcbiAgICBjb25zdCBnaXRIdWJSZXBvc0xpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2l0SHViUmVwb3NMaXN0Jyk7XG4gICAgY29uc3QgcGFnaW5hdGlvbkJsb2NrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgcGFnaW5hdGlvbkJsb2NrLmNsYXNzTGlzdC5hZGQoJ3BhZ2luYXRpb24tbGlzdCcpO1xuXG4gICAgaWYgKGFtb3VudFBhZ2VzID09PSAxKSB7XG4gICAgICAgIHBhZ2luYXRpb25CbG9jay5hcHBlbmRDaGlsZChjcmVhdGVQYWdlRWxlbSgxKSk7XG4gICAgfSBlbHNlIGlmIChhbW91bnRQYWdlcyA8IDQpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gYW1vdW50UGFnZXM7IGkrKykge1xuICAgICAgICAgICAgcGFnaW5hdGlvbkJsb2NrLmFwcGVuZENoaWxkKGNyZWF0ZVBhZ2VFbGVtKGkpKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICgrY3VycmVudFBhZ2VOdW0tMSA9PSAwKSB7XG4gICAgICAgICAgICBwYWdpbmF0aW9uQmxvY2suYXBwZW5kQ2hpbGQoY3JlYXRlUGFnZUVsZW0oK2N1cnJlbnRQYWdlTnVtKSk7XG4gICAgICAgICAgICBwYWdpbmF0aW9uQmxvY2suYXBwZW5kQ2hpbGQoY3JlYXRlUGFnZUVsZW0oK2N1cnJlbnRQYWdlTnVtKzEpKTtcbiAgICAgICAgICAgIHBhZ2luYXRpb25CbG9jay5hcHBlbmRDaGlsZChjcmVhdGVFbXB0eVBhZ2VFbGVtKCkpO1xuICAgICAgICAgICAgcGFnaW5hdGlvbkJsb2NrLmFwcGVuZENoaWxkKGNyZWF0ZVBhZ2VFbGVtKCthbW91bnRQYWdlcykpO1xuICAgICAgICB9IGVsc2UgaWYgKCtjdXJyZW50UGFnZU51bS0xID09IDEpIHtcbiAgICAgICAgICAgIHBhZ2luYXRpb25CbG9jay5hcHBlbmRDaGlsZChjcmVhdGVQYWdlRWxlbSgrY3VycmVudFBhZ2VOdW0tMSkpO1xuICAgICAgICAgICAgcGFnaW5hdGlvbkJsb2NrLmFwcGVuZENoaWxkKGNyZWF0ZVBhZ2VFbGVtKCtjdXJyZW50UGFnZU51bSkpO1xuICAgICAgICAgICAgcGFnaW5hdGlvbkJsb2NrLmFwcGVuZENoaWxkKGNyZWF0ZVBhZ2VFbGVtKCtjdXJyZW50UGFnZU51bSsxKSk7XG4gICAgICAgICAgICBwYWdpbmF0aW9uQmxvY2suYXBwZW5kQ2hpbGQoY3JlYXRlRW1wdHlQYWdlRWxlbSgpKTtcbiAgICAgICAgICAgIHBhZ2luYXRpb25CbG9jay5hcHBlbmRDaGlsZChjcmVhdGVQYWdlRWxlbSgrYW1vdW50UGFnZXMpKTtcbiAgICAgICAgfSBlbHNlIGlmICgrY3VycmVudFBhZ2VOdW0tMiA9PSAxKSB7XG4gICAgICAgICAgICBwYWdpbmF0aW9uQmxvY2suYXBwZW5kQ2hpbGQoY3JlYXRlUGFnZUVsZW0oMSkpO1xuICAgICAgICAgICAgcGFnaW5hdGlvbkJsb2NrLmFwcGVuZENoaWxkKGNyZWF0ZVBhZ2VFbGVtKCtjdXJyZW50UGFnZU51bS0xKSk7XG4gICAgICAgICAgICBwYWdpbmF0aW9uQmxvY2suYXBwZW5kQ2hpbGQoY3JlYXRlUGFnZUVsZW0oK2N1cnJlbnRQYWdlTnVtKSk7XG4gICAgICAgICAgICBwYWdpbmF0aW9uQmxvY2suYXBwZW5kQ2hpbGQoY3JlYXRlUGFnZUVsZW0oK2N1cnJlbnRQYWdlTnVtKzEpKTtcbiAgICAgICAgICAgIHBhZ2luYXRpb25CbG9jay5hcHBlbmRDaGlsZChjcmVhdGVFbXB0eVBhZ2VFbGVtKCkpO1xuICAgICAgICAgICAgcGFnaW5hdGlvbkJsb2NrLmFwcGVuZENoaWxkKGNyZWF0ZVBhZ2VFbGVtKCthbW91bnRQYWdlcykpO1xuICAgICAgICB9IGVsc2UgaWYgKCtjdXJyZW50UGFnZU51bSsxID09ICthbW91bnRQYWdlcykge1xuICAgICAgICAgICAgcGFnaW5hdGlvbkJsb2NrLmFwcGVuZENoaWxkKGNyZWF0ZVBhZ2VFbGVtKDEpKTtcbiAgICAgICAgICAgIHBhZ2luYXRpb25CbG9jay5hcHBlbmRDaGlsZChjcmVhdGVFbXB0eVBhZ2VFbGVtKCkpO1xuICAgICAgICAgICAgcGFnaW5hdGlvbkJsb2NrLmFwcGVuZENoaWxkKGNyZWF0ZVBhZ2VFbGVtKCtjdXJyZW50UGFnZU51bS0xKSk7XG4gICAgICAgICAgICBwYWdpbmF0aW9uQmxvY2suYXBwZW5kQ2hpbGQoY3JlYXRlUGFnZUVsZW0oK2N1cnJlbnRQYWdlTnVtKSk7XG4gICAgICAgICAgICBwYWdpbmF0aW9uQmxvY2suYXBwZW5kQ2hpbGQoY3JlYXRlUGFnZUVsZW0oK2Ftb3VudFBhZ2VzKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoK2N1cnJlbnRQYWdlTnVtKzIgPT0gK2Ftb3VudFBhZ2VzKSB7XG4gICAgICAgICAgICBwYWdpbmF0aW9uQmxvY2suYXBwZW5kQ2hpbGQoY3JlYXRlUGFnZUVsZW0oMSkpO1xuICAgICAgICAgICAgcGFnaW5hdGlvbkJsb2NrLmFwcGVuZENoaWxkKGNyZWF0ZUVtcHR5UGFnZUVsZW0oKSk7XG4gICAgICAgICAgICBwYWdpbmF0aW9uQmxvY2suYXBwZW5kQ2hpbGQoY3JlYXRlUGFnZUVsZW0oK2N1cnJlbnRQYWdlTnVtLTEpKTtcbiAgICAgICAgICAgIHBhZ2luYXRpb25CbG9jay5hcHBlbmRDaGlsZChjcmVhdGVQYWdlRWxlbSgrY3VycmVudFBhZ2VOdW0pKTtcbiAgICAgICAgICAgIHBhZ2luYXRpb25CbG9jay5hcHBlbmRDaGlsZChjcmVhdGVQYWdlRWxlbSgrY3VycmVudFBhZ2VOdW0rMSkpO1xuICAgICAgICAgICAgcGFnaW5hdGlvbkJsb2NrLmFwcGVuZENoaWxkKGNyZWF0ZVBhZ2VFbGVtKCthbW91bnRQYWdlcykpO1xuICAgICAgICB9IGVsc2UgaWYgKCtjdXJyZW50UGFnZU51bS0xICE9IDEgJiYgK2N1cnJlbnRQYWdlTnVtKzEgIT0gK2Ftb3VudFBhZ2VzICYmICtjdXJyZW50UGFnZU51bSsyICE9ICthbW91bnRQYWdlcyAmJiArY3VycmVudFBhZ2VOdW0gIT0gK2Ftb3VudFBhZ2VzKSB7XG4gICAgICAgICAgICBwYWdpbmF0aW9uQmxvY2suYXBwZW5kQ2hpbGQoY3JlYXRlUGFnZUVsZW0oMSkpO1xuICAgICAgICAgICAgcGFnaW5hdGlvbkJsb2NrLmFwcGVuZENoaWxkKGNyZWF0ZUVtcHR5UGFnZUVsZW0oKSk7XG4gICAgICAgICAgICBwYWdpbmF0aW9uQmxvY2suYXBwZW5kQ2hpbGQoY3JlYXRlUGFnZUVsZW0oK2N1cnJlbnRQYWdlTnVtLTEpKTtcbiAgICAgICAgICAgIHBhZ2luYXRpb25CbG9jay5hcHBlbmRDaGlsZChjcmVhdGVQYWdlRWxlbSgrY3VycmVudFBhZ2VOdW0pKTtcbiAgICAgICAgICAgIHBhZ2luYXRpb25CbG9jay5hcHBlbmRDaGlsZChjcmVhdGVQYWdlRWxlbSgrY3VycmVudFBhZ2VOdW0rMSkpO1xuICAgICAgICAgICAgcGFnaW5hdGlvbkJsb2NrLmFwcGVuZENoaWxkKGNyZWF0ZUVtcHR5UGFnZUVsZW0oKSk7XG4gICAgICAgICAgICBwYWdpbmF0aW9uQmxvY2suYXBwZW5kQ2hpbGQoY3JlYXRlUGFnZUVsZW0oK2Ftb3VudFBhZ2VzKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoK2N1cnJlbnRQYWdlTnVtID09ICthbW91bnRQYWdlcykge1xuICAgICAgICAgICAgcGFnaW5hdGlvbkJsb2NrLmFwcGVuZENoaWxkKGNyZWF0ZVBhZ2VFbGVtKDEpKTtcbiAgICAgICAgICAgIHBhZ2luYXRpb25CbG9jay5hcHBlbmRDaGlsZChjcmVhdGVFbXB0eVBhZ2VFbGVtKCkpO1xuICAgICAgICAgICAgcGFnaW5hdGlvbkJsb2NrLmFwcGVuZENoaWxkKGNyZWF0ZVBhZ2VFbGVtKCtjdXJyZW50UGFnZU51bS0xKSk7XG4gICAgICAgICAgICBwYWdpbmF0aW9uQmxvY2suYXBwZW5kQ2hpbGQoY3JlYXRlUGFnZUVsZW0oK2N1cnJlbnRQYWdlTnVtKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2l0SHViUmVwb3NMaXN0LmFwcGVuZENoaWxkKHBhZ2luYXRpb25CbG9jayk7XG4gICAgZ2V0TmV3R2l0aHViUGFnZShjdXJyZW50UGFnZU51bSk7XG59XG4iLCJjb25zdCBjaGFuZ2luZ1N0cmluZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjaGFuZ2luZy1zdHJpbmcnKTtcbmNvbnN0IGFycm93ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYXJyb3cnKVswXTtcbmNvbnN0IHBocmFzZXMgPSBbJ0p1bmlvciBmcm9udGVuZC3RgNCw0LfRgNCw0LHQvtGC0YfQuNC6JywgJ0p1bmlvciBKYXZhc2NyaXB0LdGA0LDQt9GA0LDQsdC+0YLRh9C40LonLCAnSFRNTC3QstC10YDRgdGC0LDQu9GM0YnQuNC6J107XG5jaGFuZ2luZ1N0cmluZy5pbm5lckhUTUwgPSAnJztcblxuY29uc3Qgc2hvd1BocmFzZSA9IChwaHJhc2VzLCBpbmRleCwgc3BlZWQ9MTAwLCB0aW1lb3V0PTEwMDApID0+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGhyYXNlc1tpbmRleF0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCk9PiB7XG4gICAgICAgICAgICAgICAgY2hhbmdpbmdTdHJpbmcuaW5uZXJIVE1MICs9IHBocmFzZXNbaW5kZXhdW2ldO1xuXG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IHBocmFzZXNbaW5kZXhdLmxlbmd0aC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRQaHJhc2UgPSBjaGFuZ2luZ1N0cmluZy5pbm5lckhUTUw7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoe3BocmFzZXM6IHBocmFzZXMsIGluZGV4OiBpbmRleCwgc3BlZWQ6IHNwZWVkLCB0aW1lb3V0OiB0aW1lb3V0fSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LCBpICogc3BlZWQpO1xuICAgICAgICB9XG5cbiAgICB9KS50aGVuKHJlcyA9PiB7XG4gICAgICAgIGNvbnN0IHRpbWVvdXQgPSByZXMudGltZW91dDtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwaHJhc2VzID0gcmVzLnBocmFzZXM7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3BlZWQgPSByZXMuc3BlZWQ7XG4gICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gcmVzLmluZGV4O1xuICAgICAgICAgICAgICAgIGxldCBjdXJyZW50UGhyYXNlID0gcGhyYXNlc1tpbmRleF07XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzTGVuZ3RoID0gY3VycmVudFBocmFzZS5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc0xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFBocmFzZSA9IGN1cnJlbnRQaHJhc2Uuc2xpY2UoMCwgLTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdpbmdTdHJpbmcuaW5uZXJIVE1MID0gY3VycmVudFBocmFzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IHJlc0xlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGluZGV4ID09PSBwaHJhc2VzLmxlbmd0aCAtIDEgPyAwIDogaW5kZXggKyAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsUHJvbS50aGVuKHJlcyA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dQaHJhc2UocGhyYXNlcywgaW5kZXgsIHNwZWVkLCB0aW1lb3V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9LCBpICogc3BlZWQpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LCB0aW1lb3V0KVxuXG4gICAgICAgIH0pO1xuICAgIH0pXG59XG5cbmNvbnN0IGdsb2JhbFByb20gPSBzaG93UGhyYXNlKHBocmFzZXMsIDAsIDEwMCwgMjAwMCk7XG5cbmNvbnN0IGxvbCA9ICgpID0+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwibG9sXCIpXG4gICAgICAgIHJlc29sdmUoKVxuICAgIH0pO1xufVxuXG5hcnJvdy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IHdvcmtzU2VjdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3b3Jrcy1zZWN0aW9uJyk7XG5cbiAgICB3aW5kb3cuc2Nyb2xsKHtcbiAgICAgICAgdG9wOiB3b3Jrc1NlY3Rpb24ub2Zmc2V0VG9wLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCdcbiAgICB9KVxufSlcbiIsImNvbnN0IHNob3dNb3JlV29ya3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdyZWNlbnQtd29ya3NfX3Nob3ctbW9yZScpWzBdO1xuY29uc3QgcmVjZW50V29ya3NSb3dzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgncmVjZW50LXdvcmtzX19yb3cnKTtcblxuc2hvd01vcmVXb3Jrcy5kYXRhc2V0LmlzT3BlbiA9IGZhbHNlO1xuXG5mb3IgKGxldCBpID0gMTsgaSA8IHJlY2VudFdvcmtzUm93cy5sZW5ndGg7IGkrKykge1xuICAgIHJlY2VudFdvcmtzUm93c1tpXS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xufVxuXG5zaG93TW9yZVdvcmtzLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICBpZiAoc2hvd01vcmVXb3Jrcy5kYXRhc2V0LmlzT3BlbiA9PT0gJ2ZhbHNlJykge1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHJlY2VudFdvcmtzUm93cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcmVjZW50V29ya3NSb3dzW2ldLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XG4gICAgICAgIH1cblxuICAgICAgICBzaG93TW9yZVdvcmtzLmRhdGFzZXQuaXNPcGVuID0gdHJ1ZTtcbiAgICAgICAgc2hvd01vcmVXb3Jrcy5pbm5lckhUTUwgPSAn0KHQutGA0YvRgtGMJztcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcmVjZW50V29ya3NSb3dzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICByZWNlbnRXb3Jrc1Jvd3NbaV0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfVxuXG4gICAgICAgIHdpbmRvdy5zY3JvbGwoe1xuICAgICAgICAgICAgdG9wOiB3b3Jrc1NlY3Rpb24ub2Zmc2V0VG9wLFxuICAgICAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnXG4gICAgICAgIH0pXG4gICAgICAgIFxuICAgICAgICBzaG93TW9yZVdvcmtzLmRhdGFzZXQuaXNPcGVuID0gZmFsc2U7XG4gICAgICAgIHNob3dNb3JlV29ya3MuaW5uZXJIVE1MID0gJ9Ch0LzQvtGC0YDQtdGC0Ywg0LXRidGRJztcbiAgICB9XG59KTtcbiIsImNvbnN0IHNob3dNb3JlU2tpbGxzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnc2tpbGxzX19zaG93LW1vcmUnKVswXTtcbmNvbnN0IGFsbFNraWxscyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3NraWxsc19fc2tpbGxzLWl0ZW0nKTtcbmNvbnN0IHNraWxsc0l0ZW1UaXRsZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdza2lsbHNfX2l0ZW0tdGl0bGUnKTtcblxuY29uc3Qgb25Nb3JlU2tpbGxzQ2xpY2tIYW5kbGVyID0gKGJ0biwgc2tpbGxzLCBzZWN0aW9uKSA9PiB7XG4gICAgaWYgKGJ0bi5kYXRhc2V0LmlzT3BlbiA9PT0gJ2ZhbHNlJykge1xuICAgICAgICBmb3IgKGxldCBpID0gc2tpbGxzLmxlbmd0aC0xOyBpID49IDQ7IGktLSkge1xuICAgICAgICAgICAgc2tpbGxzW2ldLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XG4gICAgICAgIH1cblxuICAgICAgICBidG4uZGF0YXNldC5pc09wZW4gPSB0cnVlO1xuICAgICAgICBidG4uaW5uZXJIVE1MID0gJ9Ch0LrRgNGL0YLRjCc7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGxldCBpID0gc2tpbGxzLmxlbmd0aC0xOyBpID49IDQ7IGktLSkge1xuICAgICAgICAgICAgc2tpbGxzW2ldLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIH1cblxuICAgICAgICBidG4uZGF0YXNldC5pc09wZW4gPSBmYWxzZTtcbiAgICAgICAgYnRuLmlubmVySFRNTCA9ICfQodC80L7RgtGA0LXRgtGMINC10YnRkSc7XG5cbiAgICAgICAgd2luZG93LnNjcm9sbCh7XG4gICAgICAgICAgICB0b3A6IHNlY3Rpb24ub2Zmc2V0VG9wLFxuICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgICB9KVxuICAgIH1cbn1cblxuY29uc3QgY29udHJvbFJlc2l6ZSA9ICgpID0+IHtcbiAgICBvbk1vcmVTa2lsbHNDbGlja0hhbmRsZXIoc2hvd01vcmVTa2lsbHMsIGFsbFNraWxscywgc2tpbGxzU2VjdGlvbik7XG59XG5cbmxldCBoZWlnaHRCZWZvcmVSZXNpemUgPSB3aW5kb3cuc2NyZWVuLmhlaWdodDtcbmxldCB3ZWlnaHRCZWZvcmVSZXNpemUgPSBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoO1xuY29uc3QgY2hlY2tXaW5kb3dTaXplID0gKCkgPT4ge1xuICAgIGlmIChNYXRoLmFicyh3aW5kb3cuc2NyZWVuLmhlaWdodCAtIGhlaWdodEJlZm9yZVJlc2l6ZSkgPiA4MCB8fCBNYXRoLmFicyhkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoIC0gd2VpZ2h0QmVmb3JlUmVzaXplKSA+IDEwKSB7XG4gICAgICAgIGhlaWdodEJlZm9yZVJlc2l6ZSA9IHdpbmRvdy5zY3JlZW4uaGVpZ2h0O1xuICAgICAgICB3ZWlnaHRCZWZvcmVSZXNpemUgPSBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoO1xuXG4gICAgICAgIGlmIChkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoIDw9IDc2Nykge1xuICAgICAgICAgICAgc2hvd01vcmVTa2lsbHMuZGF0YXNldC5pc09wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIHNob3dNb3JlU2tpbGxzLmlubmVySFRNTCA9ICfQodC80L7RgtGA0LXRgtGMINC10YnRkSc7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBhbGxTa2lsbHMubGVuZ3RoLTE7IGkgPj0gNDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgYWxsU2tpbGxzW2ldLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBhbGxTa2lsbHMubGVuZ3RoLTE7IGkgPj0gNDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgYWxsU2tpbGxzW2ldLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzaG93TW9yZVNraWxscy5kYXRhc2V0LmlzT3BlbiA9IHRydWU7XG4gICAgICAgICAgICBzaG93TW9yZVNraWxscy5pbm5lckhUTUwgPSAn0KHQutGA0YvRgtGMJztcbiAgICAgICAgfVxuICAgIH1cbn1cblxuaWYgKGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGggPD0gNzY3KSB7XG4gICAgc2hvd01vcmVTa2lsbHMuZGF0YXNldC5pc09wZW4gPSBmYWxzZTtcbiAgICBzaG93TW9yZVNraWxscy5pbm5lckhUTUwgPSAn0KHQvNC+0YLRgNC10YLRjCDQtdGJ0ZEnO1xuXG4gICAgZm9yIChsZXQgaSA9IGFsbFNraWxscy5sZW5ndGgtMTsgaSA+PSA0OyBpLS0pIHtcbiAgICAgICAgYWxsU2tpbGxzW2ldLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgfVxuXG59IGVsc2Uge1xuICAgIHNob3dNb3JlU2tpbGxzLmRhdGFzZXQuaXNPcGVuID0gdHJ1ZTtcbn1cblxuc2hvd01vcmVTa2lsbHMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjb250cm9sUmVzaXplKTtcblxuLy8g0JIg0LfQsNCy0LjRgdC40LzQvtGB0YLQuCDQvtGCINGA0LDQt9C80LXRgNCwINC+0LrQvdCwINCx0YDQsNC30YPQtdGA0LAsINGB0LrRgNGL0LLQsNC10Lwg0LjQu9C4INGA0LDQt9Cy0L7RgNCw0YfQuNCy0LDQtdC8IHNraWxsJ3MgaXRlbXNcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBjaGVja1dpbmRvd1NpemUpO1xuXG4vLyDQvdGD0LzQtdGA0LDRhtC40Y8g0L3QsNCy0YvQutC+0LIg0L/RgNC4INC80L7QsdC40LvRjNC90L7QvCDRjdC60YDQsNC90LVcbmZvciAodmFyIGkgPSAwOyBpIDwgc2tpbGxzSXRlbVRpdGxlcy5sZW5ndGg7IGkrKykge1xuICAgIHNraWxsc0l0ZW1UaXRsZXNbaV0uZGF0YXNldC5za2lsbHNOdW0gPSBgMCR7aSsxfWBcbn1cbiJdfQ==
