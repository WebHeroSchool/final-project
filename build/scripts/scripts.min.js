"use strict";

var githubSection = document.getElementById('github-section');
var skillsSection = document.getElementById('skills-section');
var worksSection = document.getElementById('works-section');
var worksBtnFooter = document.getElementById('works-btn-footer');
var skillsBtnFooter = document.getElementById('skills-btn-footer');
var githubBtnFooter = document.getElementById('github-btn-footer');
worksBtnFooter.addEventListener('click', function (e) {
  e.preventDefault();
  window.scroll({
    top: worksSection.offsetTop,
    behavior: 'smooth'
  });
});
skillsBtnFooter.addEventListener('click', function (e) {
  e.preventDefault();
  window.scroll({
    top: skillsSection.offsetTop,
    behavior: 'smooth'
  });
});
githubBtnFooter.addEventListener('click', function (e) {
  e.preventDefault();
  window.scroll({
    top: githubSection.offsetTop,
    behavior: 'smooth'
  });
});
var worksBtn = document.getElementById('works-btn');
var skillsBtn = document.getElementById('skills-btn');
var githubBtn = document.getElementById('github-btn');
var burger = document.getElementsByClassName('burger')[0];
var inputBurger = document.getElementById('input-burger');
worksBtn.addEventListener('click', function (e) {
  e.preventDefault();
  burger.classList.toggle('open');
  inputBurger.checked = false;
  document.body.classList.toggle('modal-open');
  window.scroll({
    top: worksSection.offsetTop,
    behavior: 'smooth'
  });
});
skillsBtn.addEventListener('click', function (e) {
  e.preventDefault();
  burger.classList.toggle('open');
  inputBurger.checked = false;
  document.body.classList.toggle('modal-open');
  window.scroll({
    top: skillsSection.offsetTop,
    behavior: 'smooth'
  });
});
githubBtn.addEventListener('click', function (e) {
  e.preventDefault();
  burger.classList.toggle('open');
  inputBurger.checked = false;
  document.body.classList.toggle('modal-open');
  window.scroll({
    top: githubSection.offsetTop,
    behavior: 'smooth'
  });
}); // Анимация открытия бокового меню

burger.addEventListener('click', function (e) {
  burger.classList.toggle('open');
  document.body.classList.toggle('modal-open');
});
var colors = {
  "Mercury": "#ff2b2b",
  "TypeScript": "#2b7489",
  "PureBasic": "#5a6986",
  "Objective-C++": "#6866fb",
  "Self": "#0579aa",
  "edn": "#db5855",
  "NewLisp": "#87AED7",
  "Jupyter Notebook": "#DA5B0B",
  "Rebol": "#358a5b",
  "Frege": "#00cafe",
  "Dart": "#00B4AB",
  "AspectJ": "#a957b0",
  "Shell": "#89e051",
  "Web Ontology Language": "#9cc9dd",
  "xBase": "#403a40",
  "Eiffel": "#946d57",
  "Nix": "#7e7eff",
  "RAML": "#77d9fb",
  "MTML": "#b7e1f4",
  "Racket": "#22228f",
  "Elixir": "#6e4a7e",
  "SAS": "#B34936",
  "Agda": "#315665",
  "wisp": "#7582D1",
  "D": "#ba595e",
  "Kotlin": "#F18E33",
  "Opal": "#f7ede0",
  "Crystal": "#776791",
  "Objective-C": "#438eff",
  "ColdFusion CFC": "#ed2cd6",
  "Oz": "#fab738",
  "Mirah": "#c7a938",
  "Objective-J": "#ff0c5a",
  "Gosu": "#82937f",
  "FreeMarker": "#0050b2",
  "Ruby": "#701516",
  "Component Pascal": "#b0ce4e",
  "Arc": "#aa2afe",
  "Brainfuck": "#2F2530",
  "Nit": "#009917",
  "APL": "#5A8164",
  "Go": "#375eab",
  "Visual Basic": "#945db7",
  "PHP": "#4F5D95",
  "Cirru": "#ccccff",
  "SQF": "#3F3F3F",
  "Glyph": "#e4cc98",
  "Java": "#b07219",
  "MAXScript": "#00a6a6",
  "Scala": "#DC322F",
  "Makefile": "#427819",
  "ColdFusion": "#ed2cd6",
  "Perl": "#0298c3",
  "Lua": "#000080",
  "Vue": "#2c3e50",
  "Verilog": "#b2b7f8",
  "Factor": "#636746",
  "Haxe": "#df7900",
  "Pure Data": "#91de79",
  "Forth": "#341708",
  "Red": "#ee0000",
  "Hy": "#7790B2",
  "Volt": "#1F1F1F",
  "LSL": "#3d9970",
  "eC": "#913960",
  "CoffeeScript": "#244776",
  "HTML": "#e44b23",
  "Lex": "#DBCA00",
  "API Blueprint": "#2ACCA8",
  "Swift": "#ffac45",
  "C": "#555555",
  "AutoHotkey": "#6594b9",
  "Isabelle": "#FEFE00",
  "Metal": "#8f14e9",
  "Clarion": "#db901e",
  "JSONiq": "#40d47e",
  "Boo": "#d4bec1",
  "AutoIt": "#1C3552",
  "Clojure": "#db5855",
  "Rust": "#dea584",
  "Prolog": "#74283c",
  "SourcePawn": "#5c7611",
  "AMPL": "#E6EFBB",
  "FORTRAN": "#4d41b1",
  "ANTLR": "#9DC3FF",
  "Harbour": "#0e60e3",
  "Tcl": "#e4cc98",
  "BlitzMax": "#cd6400",
  "PigLatin": "#fcd7de",
  "Lasso": "#999999",
  "ECL": "#8a1267",
  "VHDL": "#adb2cb",
  "Elm": "#60B5CC",
  "Propeller Spin": "#7fa2a7",
  "X10": "#4B6BEF",
  "IDL": "#a3522f",
  "ATS": "#1ac620",
  "Ada": "#02f88c",
  "Unity3D Asset": "#ab69a1",
  "Nu": "#c9df40",
  "LFE": "#004200",
  "SuperCollider": "#46390b",
  "Oxygene": "#cdd0e3",
  "ASP": "#6a40fd",
  "Assembly": "#6E4C13",
  "Gnuplot": "#f0a9f0",
  "JFlex": "#DBCA00",
  "NetLinx": "#0aa0ff",
  "Turing": "#45f715",
  "Vala": "#fbe5cd",
  "Processing": "#0096D8",
  "Arduino": "#bd79d1",
  "FLUX": "#88ccff",
  "NetLogo": "#ff6375",
  "C Sharp": "#178600",
  "CSS": "#563d7c",
  "Emacs Lisp": "#c065db",
  "Stan": "#b2011d",
  "SaltStack": "#646464",
  "QML": "#44a51c",
  "Pike": "#005390",
  "LOLCODE": "#cc9900",
  "ooc": "#b0b77e",
  "Handlebars": "#01a9d6",
  "J": "#9EEDFF",
  "Mask": "#f97732",
  "EmberScript": "#FFF4F3",
  "TeX": "#3D6117",
  "Nemerle": "#3d3c6e",
  "KRL": "#28431f",
  "Ren'Py": "#ff7f7f",
  "Unified Parallel C": "#4e3617",
  "Golo": "#88562A",
  "Fancy": "#7b9db4",
  "OCaml": "#3be133",
  "Shen": "#120F14",
  "Pascal": "#b0ce4e",
  "F#": "#b845fc",
  "Puppet": "#302B6D",
  "ActionScript": "#882B0F",
  "Diff": "#88dddd",
  "Ragel in Ruby Host": "#9d5200",
  "Fantom": "#dbded5",
  "Zephir": "#118f9e",
  "Click": "#E4E6F3",
  "Smalltalk": "#596706",
  "DM": "#447265",
  "Ioke": "#078193",
  "PogoScript": "#d80074",
  "LiveScript": "#499886",
  "JavaScript": "#f1e05a",
  "VimL": "#199f4b",
  "PureScript": "#1D222D",
  "ABAP": "#E8274B",
  "Matlab": "#bb92ac",
  "Slash": "#007eff",
  "R": "#198ce7",
  "Erlang": "#B83998",
  "Pan": "#cc0000",
  "LookML": "#652B81",
  "Eagle": "#814C05",
  "Scheme": "#1e4aec",
  "PLSQL": "#dad8d8",
  "Python": "#3572A5",
  "Max": "#c4a79c",
  "Common Lisp": "#3fb68b",
  "Latte": "#A8FF97",
  "XQuery": "#5232e7",
  "Omgrofl": "#cabbff",
  "XC": "#99DA07",
  "Nimrod": "#37775b",
  "SystemVerilog": "#DAE1C2",
  "Chapel": "#8dc63f",
  "Groovy": "#e69f56",
  "Dylan": "#6c616e",
  "E": "#ccce35",
  "Parrot": "#f3ca0a",
  "Grammatical Framework": "#79aa7a",
  "Game Maker Language": "#8fb200",
  "Papyrus": "#6600cc",
  "NetLinx+ERB": "#747faa",
  "Clean": "#3F85AF",
  "Alloy": "#64C800",
  "Squirrel": "#800000",
  "PAWN": "#dbb284",
  "UnrealScript": "#a54c4d",
  "Standard ML": "#dc566d",
  "Slim": "#ff8f77",
  "Perl6": "#0000fb",
  "Julia": "#a270ba",
  "Haskell": "#29b544",
  "NCL": "#28431f",
  "Io": "#a9188d",
  "Rouge": "#cc0088",
  "C++": "#f34b7d",
  "AGS Script": "#B9D9FF",
  "Dogescript": "#cca760",
  "nesC": "#94B0C7"
};
var url = 'https://api.github.com';
var options = {
  headers: {
    'Accept': 'application/vnd.github.v3+json',
    'Content-Type': 'application/json'
  }
};
var artem = "izosimov";
var ilya = "zekchan";
var user = ilya;
var reposAmount = 4;
var spinner = document.getElementById('spinner');
var amountPages = null;
var currentPageNum = 1; // Создание самого DOM-элемента - репозитория с информацией о нём

var createRepoItem = function createRepoItem(data) {
  var repoItem = document.createElement('div');
  repoItem.classList.add('github__repository-item');
  repoItem.innerHTML = "\n         <a href=\"".concat(data.url, "\" target=\"_blank\" class=\"github__repository-item-name\">").concat(data.name, "</a>\n         <div class=\"github__item-description\">\n             <div style=\"background-color: ").concat(data.color, "\" class=\"github__language-color\"></div>\n             <p class=\"github__language\">").concat(data.lang, "</p>\n             ").concat(data.stars ? '<p class="github__stars">' + data.stars + '</p>' : '', "\n             ").concat(data.forks ? '<p class="github__forks">' + data.forks + '</p>' : '', "\n             <p class=\"github__last-update\">Updated on ").concat(getCustomDate(data.updated), "</p>\n         </div>");
  return repoItem;
}; // Преобразование даты в необходимый формат


var getCustomDate = function getCustomDate(date) {
  var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
  var newDate = new Date(date);
  return "".concat(newDate.getDate(), " ").concat(months[newDate.getMonth()], " ").concat(1900 + newDate.getYear());
}; // Создание '...' в нумерации страниц (когда больше 3 страниц)


var createEmptyPageElem = function createEmptyPageElem() {
  var emptyPageElem = document.createElement('span');
  emptyPageElem.classList.add('pagination-list__item');
  emptyPageElem.innerHTML = '&hellip;';
  return emptyPageElem;
}; // Создание элемента, нумерующего страницу


var createPageElem = function createPageElem(num) {
  var pageElem = document.createElement('a');
  pageElem.classList.add('pagination-list__item');
  pageElem.innerHTML = "".concat(num);
  pageElem.addEventListener('click', function (e) {
    var allPreviousReposItems = document.querySelectorAll('.github__repository-item');
    allPreviousReposItems.forEach(function (elem) {
      return elem.remove();
    });
  });

  if (num == currentPageNum) {
    pageElem.classList.add('pagination-list__item_active');
  }

  pageElem.addEventListener('click', paginationClickHandler);
  return pageElem;
}; // Получение репозиториев на конкретной странице


var getNewGithubPage = function getNewGithubPage(pageNum) {
  spinner.style.display = 'block';
  fetch("".concat(url, "/users/").concat(user, "/repos?page=").concat(pageNum, "&per_page=").concat(reposAmount), options).then(function (response) {
    spinner.style.display = 'none';
    return response.json();
  }).then(function (res) {
    var pagination = document.querySelector('.pagination-list');
    var arr = [];
    res.forEach(function (elem) {
      arr.push({
        name: elem.name,
        forks: elem.forks,
        lang: elem.language,
        updated: elem.updated_at,
        stars: elem.stargazers_count,
        color: colors[elem.language],
        url: elem.html_url
      });
    });
    arr.forEach(function (elem, i) {
      gitHubReposList.insertBefore(createRepoItem(elem), pagination);
    });
  });
}; // Получение количества страниц в зависимости от общего числа репозиториев


fetch("".concat(url, "/users/").concat(user), options).then(function (response) {
  return response.json();
}).then(function (res) {
  amountPages = Math.ceil(res.public_repos / reposAmount);
  setPagination(currentPageNum, amountPages);
}); // Обработка клика по номеру страницы (удаление старого блока со страницами)

var paginationClickHandler = function paginationClickHandler(event) {
  currentPageNum = event.target.innerHTML;
  var gitHubReposList = document.getElementById('gitHubReposList');
  var paginationBlock = document.querySelector('.pagination-list');
  var allPreviousPages = document.querySelectorAll('.pagination-list__item');
  var options = {
    top: githubSection.offsetTop,
    behavior: 'smooth'
  };
  window.scroll(options);
  allPreviousPages.forEach(function (elem) {
    return elem.remove();
  });
  paginationBlock.remove();
  setPagination(currentPageNum, amountPages);
}; // Создание нового блока со страницами


var setPagination = function setPagination(currentPageNum, amountPages) {
  var gitHubReposList = document.getElementById('gitHubReposList');
  var paginationBlock = document.createElement('div');
  paginationBlock.classList.add('pagination-list');

  if (amountPages === 1) {
    paginationBlock.appendChild(createPageElem(1));
  } else if (amountPages < 4) {
    for (var _i = 1; _i <= amountPages; _i++) {
      paginationBlock.appendChild(createPageElem(_i));
    }
  } else {
    if (+currentPageNum - 1 == 0) {
      paginationBlock.appendChild(createPageElem(+currentPageNum));
      paginationBlock.appendChild(createPageElem(+currentPageNum + 1));
      paginationBlock.appendChild(createEmptyPageElem());
      paginationBlock.appendChild(createPageElem(+amountPages));
    } else if (+currentPageNum - 1 == 1) {
      paginationBlock.appendChild(createPageElem(+currentPageNum - 1));
      paginationBlock.appendChild(createPageElem(+currentPageNum));
      paginationBlock.appendChild(createPageElem(+currentPageNum + 1));
      paginationBlock.appendChild(createEmptyPageElem());
      paginationBlock.appendChild(createPageElem(+amountPages));
    } else if (+currentPageNum - 2 == 1) {
      paginationBlock.appendChild(createPageElem(1));
      paginationBlock.appendChild(createPageElem(+currentPageNum - 1));
      paginationBlock.appendChild(createPageElem(+currentPageNum));
      paginationBlock.appendChild(createPageElem(+currentPageNum + 1));
      paginationBlock.appendChild(createEmptyPageElem());
      paginationBlock.appendChild(createPageElem(+amountPages));
    } else if (+currentPageNum + 1 == +amountPages) {
      paginationBlock.appendChild(createPageElem(1));
      paginationBlock.appendChild(createEmptyPageElem());
      paginationBlock.appendChild(createPageElem(+currentPageNum - 1));
      paginationBlock.appendChild(createPageElem(+currentPageNum));
      paginationBlock.appendChild(createPageElem(+amountPages));
    } else if (+currentPageNum + 2 == +amountPages) {
      paginationBlock.appendChild(createPageElem(1));
      paginationBlock.appendChild(createEmptyPageElem());
      paginationBlock.appendChild(createPageElem(+currentPageNum - 1));
      paginationBlock.appendChild(createPageElem(+currentPageNum));
      paginationBlock.appendChild(createPageElem(+currentPageNum + 1));
      paginationBlock.appendChild(createPageElem(+amountPages));
    } else if (+currentPageNum - 1 != 1 && +currentPageNum + 1 != +amountPages && +currentPageNum + 2 != +amountPages && +currentPageNum != +amountPages) {
      paginationBlock.appendChild(createPageElem(1));
      paginationBlock.appendChild(createEmptyPageElem());
      paginationBlock.appendChild(createPageElem(+currentPageNum - 1));
      paginationBlock.appendChild(createPageElem(+currentPageNum));
      paginationBlock.appendChild(createPageElem(+currentPageNum + 1));
      paginationBlock.appendChild(createEmptyPageElem());
      paginationBlock.appendChild(createPageElem(+amountPages));
    } else if (+currentPageNum == +amountPages) {
      paginationBlock.appendChild(createPageElem(1));
      paginationBlock.appendChild(createEmptyPageElem());
      paginationBlock.appendChild(createPageElem(+currentPageNum - 1));
      paginationBlock.appendChild(createPageElem(+currentPageNum));
    }
  }

  gitHubReposList.appendChild(paginationBlock);
  getNewGithubPage(currentPageNum);
};

var changingString = document.getElementById('changing-string');
var arrow = document.getElementsByClassName('arrow')[0];
var phrases = ['Junior frontend-разработчик', 'Junior Javascript-разработчик', 'HTML-верстальщик'];
changingString.innerHTML = '';

var showPhrase = function showPhrase(phrases, index) {
  var speed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;
  var timeout = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1000;
  return new Promise(function (resolve) {
    var _loop = function _loop(_i2) {
      setTimeout(function () {
        changingString.innerHTML += phrases[index][_i2];

        if (_i2 === phrases[index].length - 1) {
          var currentPhrase = changingString.innerHTML;
          resolve({
            phrases: phrases,
            index: index,
            speed: speed,
            timeout: timeout
          });
        }
      }, _i2 * speed);
    };

    for (var _i2 = 0; _i2 < phrases[index].length; _i2++) {
      _loop(_i2);
    }
  }).then(function (res) {
    var timeout = res.timeout;
    return new Promise(function (resolve, reject) {
      setTimeout(function () {
        var phrases = res.phrases;
        var speed = res.speed;
        var index = res.index;
        var currentPhrase = phrases[index];
        var resLength = currentPhrase.length;

        var _loop2 = function _loop2(_i3) {
          setTimeout(function () {
            currentPhrase = currentPhrase.slice(0, -1);
            changingString.innerHTML = currentPhrase;

            if (_i3 === resLength - 1) {
              index = index === phrases.length - 1 ? 0 : index + 1;
              globalProm.then(function (res) {
                showPhrase(phrases, index, speed, timeout);
              });
              resolve();
            }
          }, _i3 * speed);
        };

        for (var _i3 = 0; _i3 < resLength; _i3++) {
          _loop2(_i3);
        }
      }, timeout);
    });
  });
};

var globalProm = showPhrase(phrases, 0, 100, 2000);

var lol = function lol() {
  return new Promise(function (resolve, reject) {
    console.log("lol");
    resolve();
  });
};

arrow.addEventListener('click', function (e) {
  e.preventDefault();
  var worksSection = document.getElementById('works-section');
  window.scroll({
    top: worksSection.offsetTop,
    behavior: 'smooth'
  });
});
var showMoreWorks = document.getElementsByClassName('recent-works__show-more')[0];
var recentWorksRows = document.getElementsByClassName('recent-works__row');
showMoreWorks.dataset.isOpen = false;

for (var _i4 = 1; _i4 < recentWorksRows.length; _i4++) {
  recentWorksRows[_i4].style.display = 'none';
}

showMoreWorks.addEventListener('click', function (e) {
  if (showMoreWorks.dataset.isOpen === 'false') {
    for (var _i5 = 1; _i5 < recentWorksRows.length; _i5++) {
      recentWorksRows[_i5].style.display = 'flex';
    }

    showMoreWorks.dataset.isOpen = true;
    showMoreWorks.innerHTML = 'Скрыть';
  } else {
    for (var _i6 = 1; _i6 < recentWorksRows.length; _i6++) {
      recentWorksRows[_i6].style.display = 'none';
    }

    window.scroll({
      top: worksSection.offsetTop,
      behavior: 'smooth'
    });
    showMoreWorks.dataset.isOpen = false;
    showMoreWorks.innerHTML = 'Смотреть ещё';
  }
});
var showMoreSkills = document.getElementsByClassName('skills__show-more')[0];
var allSkills = document.getElementsByClassName('skills__skills-item');
var skillsItemTitles = document.getElementsByClassName('skills__item-title');

var onMoreSkillsClickHandler = function onMoreSkillsClickHandler(btn, skills, section) {
  if (btn.dataset.isOpen === 'false') {
    for (var _i7 = skills.length - 1; _i7 >= 4; _i7--) {
      skills[_i7].style.display = 'flex';
    }

    btn.dataset.isOpen = true;
    btn.innerHTML = 'Скрыть';
  } else {
    for (var _i8 = skills.length - 1; _i8 >= 4; _i8--) {
      skills[_i8].style.display = 'none';
    }

    window.scroll({
      top: section.offsetTop,
      behavior: 'smooth'
    });
    btn.dataset.isOpen = false;
    btn.innerHTML = 'Смотреть ещё';
  }
};

var controlResize = function controlResize() {
  onMoreSkillsClickHandler(showMoreSkills, allSkills, skillsSection);
}; // В зависимости от размера окна бразуера, скрываем или разворачиваем skill's items


window.addEventListener('resize', function () {
  if (document.body.clientWidth <= 767) {
    showMoreSkills.dataset.isOpen = false;

    for (var _i9 = allSkills.length - 1; _i9 >= 4; _i9--) {
      allSkills[_i9].style.display = 'none';
    }

    showMoreSkills.addEventListener('click', controlResize);
  } else {
    for (var _i10 = allSkills.length - 1; _i10 >= 4; _i10--) {
      allSkills[_i10].style.display = 'flex';
    }
  }
}); // нумерация навыков при мобильном экране

for (var i = 0; i < skillsItemTitles.length; i++) {
  skillsItemTitles[i].dataset.skillsNum = "0".concat(i + 1);
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
